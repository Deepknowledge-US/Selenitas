{"version":3,"sources":["components/Header/Header.js","components/Hook/Connection.js","components/Hook/Publisher.js","components/Hook/Subscriber.js","components/Hook/Receiver.js","components/Hook/index.js","components/Body/Body.js","components/Footer/Footer.js","components/ConnectionForm/ConnectionForm.js","components/Sidebar/Sidebar.js","components/Main/Page.js","components/CreatePanel/CreatePanel.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContent","props","id","className","Connection","connect","disconnect","connectBtn","Form","useForm","form","record","host","clientId","Math","random","toString","substr","port","ConnectionForm","layout","name","initialValues","onFinish","values","username","password","url","options","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","rejectUnauthorized","gutter","span","Item","label","title","actions","type","onClick","submit","danger","Publisher","publish","qosOptions","useContext","QosOption","PublishForm","TextArea","offset","style","textAlign","htmlType","Subscriber","sub","unSub","showUnsub","SubForm","marginLeft","getFieldsValue","Receiver","useState","messages","setMessages","useEffect","size","bordered","dataSource","renderItem","item","Meta","description","message","createContext","qosOption","value","HookMqtt","client","setClient","isSubed","setIsSub","setPayload","connectStatus","setConnectStatus","on","err","console","error","end","mqttOption","mqtt","Provider","subscription","subscribe","log","unsubscribe","context","BodyContent","padding","minHeight","Hook","FooterContent","Sider","Layout","SubMenu","Menu","SidebarContent","collapsed","collapseFunction","collapsible","onCollapse","e","theme","defaultSelectedKeys","mode","icon","ApartmentOutlined","TeamOutlined","Page","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.065aef48.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nfunction HeaderContent(props){\n    return (\n        <div id=\"header\" className = \"site-layout-background\" >\n            <div id=\"logo-div\"></div>\n            <h3>nin - Deepknowledge Group</h3>\n        </div>\n    );\n}\n\nexport default HeaderContent;","import React from 'react';\nimport { Card, Button, Form, Input, Row, Col } from 'antd';\n\nconst Connection = ({ connect, disconnect, connectBtn }) => {\n  const [form] = Form.useForm();\n  const record = {\n    host: '127.0.0.1',\n    clientId: `mqttjs_ + ${Math.random().toString(16).substr(2, 8)}`,\n    port: 8083,\n  };\n  const onFinish = (values) => {\n    const { host, clientId, port, username, password } = values;\n    const url = `ws://${host}:${port}/mqtt`;\n    const options = {\n      keepalive: 30,\n      protocolId: 'MQTT',\n      protocolVersion: 4,\n      clean: true,\n      reconnectPeriod: 1000,\n      connectTimeout: 30 * 1000,\n      will: {\n        topic: 'WillMsg',\n        payload: 'Connection Closed abnormally..!',\n        qos: 0,\n        retain: false\n      },\n      rejectUnauthorized: false\n    };\n    options.clientId = clientId;\n    options.username = username;\n    options.password = password;\n    connect(url, options);\n  };\n\n  const handleConnect = () => {\n    form.submit();\n  };\n\n  const handleDisconnect = () => {\n    disconnect();\n  };\n\n  const ConnectionForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={8}>\n          <Form.Item\n            label=\"Host\"\n            name=\"host\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item\n            label=\"Port\"\n            name=\"port\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item\n            label=\"Client ID\"\n            name=\"clientId\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item\n            label=\"Username\"\n            name=\"username\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item\n            label=\"Password\"\n            name=\"password\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Connection\"\n      actions={[\n        <Button type=\"primary\" onClick={handleConnect}>{connectBtn}</Button>,\n        <Button danger onClick={handleDisconnect}>Disconnect</Button>\n      ]}\n    >\n      {ConnectionForm}\n    </Card>\n  );\n}\n\nexport default Connection;\n","import React, { useContext } from 'react';\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd';\nimport { QosOption } from './index'\n\nconst Publisher = ({ publish }) => {\n  const [form] = Form.useForm();\n  const qosOptions = useContext(QosOption);\n\n  const record = {\n    topic: 'testtopic/react',\n    qos: 0,\n  };\n\n  const onFinish = (values) => {\n    publish(values)\n  };\n\n  const PublishForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={12}>\n          <Form.Item\n            label=\"Topic\"\n            name=\"topic\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\"QoS\"\n            name=\"qos\"\n          >\n            <Select options={qosOptions} />\n          </Form.Item>\n        </Col>\n        <Col span={24}>\n          <Form.Item\n            label=\"Payload\"\n            name=\"payload\"\n          >\n            <Input.TextArea />\n          </Form.Item>\n        </Col>\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Publish\n            </Button>\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Publisher\"\n    >\n      {PublishForm}\n    </Card>\n  );\n}\n\nexport default Publisher;\n","import React, { useContext } from 'react';\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd';\nimport { QosOption } from './index'\n\nconst Subscriber = ({ sub, unSub, showUnsub }) => {\n  const [form] = Form.useForm();\n  const qosOptions = useContext(QosOption);\n\n  const record = {\n    topic: 'from_server/#',\n    qos: 0,\n  };\n\n  const onFinish = (values) => {\n    sub(values);\n  };\n\n  const handleUnsub = () => {\n    const values = form.getFieldsValue();\n    unSub(values);\n  };\n\n  const SubForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={12}>\n          <Form.Item\n            label=\"Topic\"\n            name=\"topic\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\"QoS\"\n            name=\"qos\"\n          >\n            <Select options={qosOptions} />\n          </Form.Item>\n        </Col>\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Subscribe\n            </Button>\n            {\n              showUnsub ?\n                <Button type=\"danger\" style={{ marginLeft: '10px' }} onClick={handleUnsub}>\n                  Unsubscribe\n                </Button>\n                : null\n            }\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Subscriber\"\n    >\n      {SubForm}\n    </Card>\n  );\n}\n\nexport default Subscriber;\n","import React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\n\nconst Receiver = ({ payload }) => {\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    if (payload.topic) {\n      setMessages(messages => [...messages, payload])\n    }\n  }, [payload])\n\n  const renderListItem = (item) => (\n    <List.Item>\n      <List.Item.Meta\n        title={item.topic}\n        description={item.message}\n      />\n    </List.Item>\n  )\n\n  return (\n    <Card\n      title=\"Receiver\"\n    >\n      <List\n        size=\"small\"\n        bordered\n        dataSource={messages}\n        renderItem={renderListItem}\n      />\n    </Card>\n  );\n}\n\nexport default Receiver;\n","import React, { createContext, useEffect, useState } from 'react';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\nimport mqtt from 'mqtt';\n\nexport const QosOption = createContext([])\nconst qosOption = [\n  {\n    label: '0',\n    value: 0,\n  }, {\n    label: '1',\n    value: 1,\n  }, {\n    label: '2',\n    value: 2,\n  },\n];\n\nconst HookMqtt = () => {\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', (err) => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = { topic, message: message.toString() };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  }\n\n  const mqttPublish = (context) => {\n    if (client) {\n      const { topic, qos, payload } = context;\n      client.publish(topic, payload, { qos }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  }\n\n  const mqttSub = (subscription) => {\n    if (client) {\n      const { topic, qos } = subscription;\n      client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log('Subscribe to topics error', error)\n          return\n        }\n        setIsSub(true)\n      });\n    }\n  };\n\n  const mqttUnSub = (subscription) => {\n    if (client) {\n      const { topic } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error)\n          return\n        }\n        setIsSub(false);\n      });\n    }\n  };\n\n  return (\n    <>\n      <Connection connect={mqttConnect} disconnect={mqttDisconnect} connectBtn={connectStatus} />\n      <QosOption.Provider value={qosOption}>\n        <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n        <Publisher publish={mqttPublish} />\n      </QosOption.Provider>\n      <Receiver payload={payload}/>\n    </>\n  );\n}\n\nexport default HookMqtt;\n","import React    from 'react';\n\n\nimport './Body.css'\nimport HookMqtt from '../Hook/index'\n\n\nfunction BodyContent(props) {\n    return (\n        <div id=\"body-div\" >\n            {/* <div className = \"site-layout-background\" style = {{ padding: 24, minHeight: '100vh' }} > */}\n            <div className=\"container-fluid\" style = {{ padding: 24, minHeight: '100vh' }}>\n\t\t\t\t<HookMqtt id='mqtt' />\n                doQuer\n\t\t\t</div>\n            {/* </div> */}\n        </div>\n    );\n}\n\nexport default BodyContent;","import React from 'react';\nimport './Footer.css'\n\nfunction FooterContent(props) {\n    return (\n        <div id=\"footer-div\">\n            <div>Item 1</div>\n            <div>Item 2</div>\n            <div>Item 3</div>\n            <div>Item 4</div>\n        </div>\n    );\n}\n\nexport default FooterContent;","import React from 'react';\nimport { Form, Input, Button } from 'antd';\nimport AppendScript from '../../js/appendScript'\n\nimport './ConnectionForm.css'\nimport {onFinish, onFinishFailed} from './LogicConnectionForm'\n\n// import Paho from '../../js/pahoMqtt'\n\nconst layout = {\n\tlabelCol: \t{ span: 8, },\n\twrapperCol: { span: 16,\t},\n};\n\nconst tailLayout = {\n\twrapperCol: { offset: 8, span: 16, },\n};\n\nfunction ConnectionForm() {\n\n\t// AppendScript(\"https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.2/mqttws31.min.js\");\n\t// const s = new Paho.MQTT.Client('123.123.123.123', 8083, 123);\n\t// console.log(s)\n\n\treturn (\n\t\t<Form\n\t\t\t{...layout}\n\t\t\tid=\"connection-form\"\n\t\t\tname=\"connection-form\"\n\t\t\tinitialValues={{ remember: true, }}\n\t\t\tonFinish={onFinish}\n\t\t\tonFinishFailed={onFinishFailed}\n\t\t>\n\t\t\t<Form.Item\n\t\t\t\tlabel=\"IP\"\n\t\t\t\tname=\"ip\"\n\t\t\t\trules={[\n\t\t\t\t\t{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmessage: 'Ip value', // This message will be displayed when user try to submit the form with empty port field.\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<Input id=\"ip\" />\n\t\t\t</Form.Item>\n\n\t\t\t<Form.Item\n\t\t\t\t\n\t\t\t\tlabel=\"Port\"\n\t\t\t\tname=\"port\"\n\t\t\t\trules={[\n\t\t\t\t\t{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmessage: 'Port number', // This message will be displayed when user try to submit the form with empty port field.\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<Input id=\"port\" />\n\t\t\t</Form.Item>\n\n\t\t\t<Form.Item id=\"form-button-div\" {...tailLayout}>\n\t\t\t\t<Button id=\"connect-button\" type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\tConnect\n\t\t\t\t</Button>\n\t\t\t\t<Button id=\"disconnect-button\" type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\tDiscon.\n\t\t\t\t</Button>\n\t\t\t</Form.Item>\n\t\t</Form>\n\t);\n};\n\nexport default ConnectionForm","import React, { useState } from 'react';\n\nimport HookMqtt from '../Hook/index'\n\nimport { Layout, Menu }                     from 'antd';\nimport { ApartmentOutlined,\tTeamOutlined }  from '@ant-design/icons';\nimport ConnectionForm                       from '../ConnectionForm/ConnectionForm'\n\nimport './Sidebar.css'\n\nconst { Sider }     = Layout;\nconst { SubMenu }   = Menu;\n\n\nfunction SidebarContent(props) {\n\n    const [collapsed, collapseFunction] = useState(true);\n\n    const onCollapse = (e) => {\n\t\tconsole.log(collapsed);\n        collapseFunction(e);\n\t};\n\n    return(\n        <Sider id='sideBar' collapsible collapsed={collapsed} onCollapse={onCollapse}>\n            <Menu theme='dark' id=\"sidebar-menu\" defaultSelectedKeys = {['1']} mode = \"inline\">\n                <SubMenu   key = \"sub1\" icon = {<ApartmentOutlined />} title = \"Connection\">\n                    {/* <ConnectionForm /> */}\n                    <HookMqtt id='mqtt' />\n                </SubMenu>\n                <SubMenu   key = \"sub2\" icon = {<TeamOutlined />} title = \"A thing\">\n                    <Menu.Item key = \"6\">Team 10</Menu.Item>\n                    <Menu.Item key = \"8\">Team 20</Menu.Item>\n                </SubMenu>\n            </Menu>\n        </Sider>\n    );\n}\n\nexport default SidebarContent;\n\n","import React from 'react';\n\nimport { Layout }     from 'antd';\nimport HeaderContent  from './../Header/Header'\nimport BodyContent    from './../Body/Body'\nimport FooterContent  from './../Footer/Footer'\nimport SidebarContent from './../Sidebar/Sidebar'\n\nimport 'antd/dist/antd.css';\n\nfunction Page (props) {\n    return (\n        <Layout style={{ minHeight: '100vh' }} >\n            <SidebarContent />\n            <Layout className=\"site-layout\">\n                <HeaderContent />\n                <BodyContent />\n                <FooterContent />\n            </Layout>\n        </Layout> \n    );\n}\n\nexport default Page;","import { jsPanel } from 'jspanel4/es6module/jspanel';\nimport 'jspanel4/es6module/extensions/modal/jspanel.modal';\nimport 'jspanel4/dist/jspanel.min.css';\nimport './CreatePanel.css'\nimport {createSlider, createBoolean} from './inputs'\n\n\nconst CreatePanel = (props) => {\n\t\n\tconst order  = props.order\n\tconst items  = props.ui_settings\n\tconst width  = props.width;\n\tconst height = props.height;\n\tconst title  = props.title;\n\tconst x      = props.x;\n\tconst y      = props.y;\n\n\tconst panelDiv = document.createElement('div');\n\tpanelDiv.className = 'panel_div';\n\tpanelDiv.id = title;\n\n\t// console.log(order)\n\t// createSlider(panelDiv, title, 'slide1', 0, 1, 0.1, 0.5)\n\n\torder.forEach(\n\t\t(itemName) => {\n\t\t\tconst item = items[itemName];\n\t\t\tconst currentValue = props[itemName];\n\n\t\t\tif (item.type === 'slider') \n\t\t\t{\n\t\t\t\tcreateSlider(panelDiv, title, itemName, item.min, item.max, item.step, currentValue)\n\t\t\t} \n\t\t\telse if (item.type === 'boolean') \n\t\t\t{\n\t\t\t\tcreateBoolean(panelDiv,title, itemName, currentValue)\n\t\t\t};\n\t\t}\n\t);\n\n\tconst newPanel = () => {\n\t\tif (document.getElementById(title)==null) {\n\t\t\tjsPanel.create({\n\t\t\t\ttheme: 'dark',\n\t\t\t\theaderLogo: '<i class=\"fad fa-home-heart ml-2\"></i>',\n\t\t\t\theaderTitle: title,\n\t\t\t\tpanelSize: {\n\t\t\t\t\twidth: () => { return Math.min(width, window.innerWidth*0.9);},\n\t\t\t\t\theight: () => { return Math.min(height, window.innerHeight*0.6);}\n\t\t\t\t},\n\t\t\t\tposition: 'left-top ' + x + ' ' + y,\n\t\t\t\tanimateIn: 'jsPanelFadeIn',\n\t\t\t\tonwindowresize: true,\n\t\t\t\tcontent: panelDiv,\n\t\t\t\t\t\n\t\t\t\tonbeforeclose: function() {\n\t\t\t\t\treturn window.confirm('Do you really want to close the ' + props.title + ' panel?');\n\t\t\t\t}\n\t\t\t});            \n\t\t}\n\t}\n\n\treturn(\n\t\t<div>{newPanel()}</div>\n\t)\n}\n\nexport default CreatePanel\n","\n// import React from 'react';\nimport React from 'react';\nimport Page from './components/Main/Page'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport 'jspanel4/es6module/extensions/modal/jspanel.modal';\nimport 'jspanel4/dist/jspanel.min.css';\n\nimport CreatePanel from './components/CreatePanel/CreatePanel'\n\nimport HookMqtt from './components/Hook/index'\n\n// This is used to test jsPanel\nconst msg = {\n\t\"order\": [\n\t\t\"num violents\",\n\t\t\"shooting?\",\n\t\t\"shoot noise\",\n\t\t\"attack prob\",\n\t\t\"success rate\",\n\t\t\"attacker speed\"\n\t],\n\t\"x\": 215,\n\t\"shoot noise\": 0.5,\n\t\"shooting?\": false,\n\t\"y\": 100,\n\t\"num violents\": 1,\n\t\"ui_settings\": {\n\t\t\"attacker speed\": {\n\t\t\t\"type\": \"slider\",\n\t\t\t\"max\": 3.5,\n\t\t\t\"min\": 0,\n\t\t\t\"step\": 0.01\n\t\t},\n\t\t\"attack prob\": {\n\t\t\t\"type\": \"slider\",\n\t\t\t\"max\": 1.000001,\n\t\t\t\"min\": 0,\n\t\t\t\"step\": 0.01\n\t\t},\n\t\t\"shooting?\": {\n\t\t\t\"type\": \"boolean\"\n\t\t},\n\t\t\"num violents\": {\n\t\t\t\"type\": \"slider\",\n\t\t\t\"max\": 10,\n\t\t\t\"min\": 0,\n\t\t\t\"step\": 1\n\t\t},\n\t\t\"shoot noise\": {\n\t\t\t\"type\": \"slider\",\n\t\t\t\"max\": 1.000001,\n\t\t\t\"min\": 0,\n\t\t\t\"step\": 0.01\n\t\t},\n\t\t\"success rate\": {\n\t\t\t\"type\": \"slider\",\n\t\t\t\"max\": 1.000001,\n\t\t\t\"min\": 0,\n\t\t\t\"step\": 0.01\n\t\t}\n\t},\n\t\"success rate\": 0.5,\n\t\"title\": \"violents\",\n\t\"width\": 200,\n\t\"num_items\": 6,\n\t\"attack prob\": 0.8,\n\t\"height\": 300,\n\t\"attacker speed\": 0.75\n}\n\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Page />\n\t\t\t{/* <CreatePanel {...msg} /> */}\n\t\t\t{/* <HookMqtt /> */}\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","//\n// THIS IS NOT USED IN NIN YET\n//\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t.register(swUrl)\n\t.then(registration => {\n\t\tregistration.onupdatefound = () => {\n\t\t\tconst installingWorker = registration.installing;\n\t\t\tif (installingWorker == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t})\n\t.catch(error => {\n\t\tconsole.error('Error during service worker registration:', error);\n\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}