{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/Hook/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const QosOption = /*#__PURE__*/createContext([]);\nconst qosOption = [{\n  label: '0',\n  value: 0\n}, {\n  label: '1',\n  value: 1\n}, {\n  label: '2',\n  value: 2\n}];\nexport const NewContext = /*#__PURE__*/createContext([]);\n\nconst HookMqtt = () => {\n  _s();\n\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', err => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = {\n          topic,\n          message: message.toString()\n        };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  };\n\n  const mqttPublish = context => {\n    if (client) {\n      const {\n        topic,\n        qos,\n        payload\n      } = context;\n      client.publish(topic, payload, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  };\n\n  const mqttSub = subscription => {\n    if (client) {\n      const {\n        topic,\n        qos\n      } = subscription;\n      client.subscribe(topic, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Subscribe to topics error', error);\n          return;\n        }\n\n        setIsSub(true);\n      });\n    }\n  };\n\n  const mqttUnSub = subscription => {\n    if (client) {\n      const {\n        topic\n      } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error);\n          return;\n        }\n\n        setIsSub(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Connection, {\n      connect: mqttConnect,\n      disconnect: mqttDisconnect,\n      connectBtn: connectStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QosOption.Provider, {\n      value: qosOption,\n      children: [/*#__PURE__*/_jsxDEV(Subscriber, {\n        sub: mqttSub,\n        unSub: mqttUnSub,\n        showUnsub: isSubed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Publisher, {\n        publish: mqttPublish\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Receiver, {\n      payload: payload,\n      publish: mqttPublish\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HookMqtt, \"LbUN1VJEh+ybIa+95rFx5KFivKk=\");\n\n_c = HookMqtt;\nexport default HookMqtt;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookMqtt\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/index.js"],"names":["React","createContext","useEffect","useState","Connection","Publisher","Subscriber","Receiver","mqtt","QosOption","qosOption","label","value","NewContext","HookMqtt","client","setClient","isSubed","setIsSub","payload","setPayload","connectStatus","setConnectStatus","mqttConnect","host","mqttOption","connect","on","err","console","error","end","topic","message","toString","mqttDisconnect","mqttPublish","context","qos","publish","log","mqttSub","subscription","subscribe","mqttUnSub","unsubscribe"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\nimport mqtt from 'mqtt';\n\nexport const QosOption = createContext([])\nconst qosOption = [\n  {\n    label: '0',\n    value: 0,\n  }, {\n    label: '1',\n    value: 1,\n  }, {\n    label: '2',\n    value: 2,\n  },\n];\n\n\nexport const NewContext = createContext([])\n\n\n\nconst HookMqtt = () => {\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', (err) => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = { topic, message: message.toString() };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  }\n\n  const mqttPublish = (context) => {\n    if (client) {\n      const { topic, qos, payload } = context;\n      client.publish(topic, payload, { qos }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  }\n\n  const mqttSub = (subscription) => {\n    if (client) {\n      const { topic, qos } = subscription;\n      client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log('Subscribe to topics error', error)\n          return\n        }\n        setIsSub(true)\n      });\n    }\n  };\n\n  const mqttUnSub = (subscription) => {\n    if (client) {\n      const { topic } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error)\n          return\n        }\n        setIsSub(false);\n      });\n    }\n  };\n\n  return (\n    <>\n      <Connection connect={mqttConnect} disconnect={mqttDisconnect} connectBtn={connectStatus} />\n      <QosOption.Provider value={qosOption}>\n        <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n        <Publisher publish={mqttPublish} />\n      </QosOption.Provider>\n      <Receiver payload={payload} publish={mqttPublish} />\n    </>\n  );\n}\n\nexport default HookMqtt;"]},"metadata":{},"sourceType":"module"}