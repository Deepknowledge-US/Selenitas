{"ast":null,"code":"import { initRange } from \"./init.js\";\nexport const implicit = Symbol(\"implicit\");\nexport default function ordinal() {\n  var index = new Map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\",\n        i = index.get(key);\n\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new Map();\n\n    for (const value of _) {\n      const key = value + \"\";\n      if (index.has(key)) continue;\n      index.set(key, domain.push(value));\n    }\n\n    return scale;\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n  return scale;\n}","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/node_modules/d3-scale/src/ordinal.js"],"names":["initRange","implicit","Symbol","ordinal","index","Map","domain","range","unknown","scale","d","key","i","get","set","push","length","_","arguments","slice","value","has","Array","from","copy","apply"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,MAAM,CAAC,UAAD,CAAvB;AAEP,eAAe,SAASC,OAAT,GAAmB;AAChC,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AAAA,MACIC,MAAM,GAAG,EADb;AAAA,MAEIC,KAAK,GAAG,EAFZ;AAAA,MAGIC,OAAO,GAAGP,QAHd;;AAKA,WAASQ,KAAT,CAAeC,CAAf,EAAkB;AAChB,QAAIC,GAAG,GAAGD,CAAC,GAAG,EAAd;AAAA,QAAkBE,CAAC,GAAGR,KAAK,CAACS,GAAN,CAAUF,GAAV,CAAtB;;AACA,QAAI,CAACC,CAAL,EAAQ;AACN,UAAIJ,OAAO,KAAKP,QAAhB,EAA0B,OAAOO,OAAP;AAC1BJ,MAAAA,KAAK,CAACU,GAAN,CAAUH,GAAV,EAAeC,CAAC,GAAGN,MAAM,CAACS,IAAP,CAAYL,CAAZ,CAAnB;AACD;;AACD,WAAOH,KAAK,CAAC,CAACK,CAAC,GAAG,CAAL,IAAUL,KAAK,CAACS,MAAjB,CAAZ;AACD;;AAEDP,EAAAA,KAAK,CAACH,MAAN,GAAe,UAASW,CAAT,EAAY;AACzB,QAAI,CAACC,SAAS,CAACF,MAAf,EAAuB,OAAOV,MAAM,CAACa,KAAP,EAAP;AACvBb,IAAAA,MAAM,GAAG,EAAT,EAAaF,KAAK,GAAG,IAAIC,GAAJ,EAArB;;AACA,SAAK,MAAMe,KAAX,IAAoBH,CAApB,EAAuB;AACrB,YAAMN,GAAG,GAAGS,KAAK,GAAG,EAApB;AACA,UAAIhB,KAAK,CAACiB,GAAN,CAAUV,GAAV,CAAJ,EAAoB;AACpBP,MAAAA,KAAK,CAACU,GAAN,CAAUH,GAAV,EAAeL,MAAM,CAACS,IAAP,CAAYK,KAAZ,CAAf;AACD;;AACD,WAAOX,KAAP;AACD,GATD;;AAWAA,EAAAA,KAAK,CAACF,KAAN,GAAc,UAASU,CAAT,EAAY;AACxB,WAAOC,SAAS,CAACF,MAAV,IAAoBT,KAAK,GAAGe,KAAK,CAACC,IAAN,CAAWN,CAAX,CAAR,EAAuBR,KAA3C,IAAoDF,KAAK,CAACY,KAAN,EAA3D;AACD,GAFD;;AAIAV,EAAAA,KAAK,CAACD,OAAN,GAAgB,UAASS,CAAT,EAAY;AAC1B,WAAOC,SAAS,CAACF,MAAV,IAAoBR,OAAO,GAAGS,CAAV,EAAaR,KAAjC,IAA0CD,OAAjD;AACD,GAFD;;AAIAC,EAAAA,KAAK,CAACe,IAAN,GAAa,YAAW;AACtB,WAAOrB,OAAO,CAACG,MAAD,EAASC,KAAT,CAAP,CAAuBC,OAAvB,CAA+BA,OAA/B,CAAP;AACD,GAFD;;AAIAR,EAAAA,SAAS,CAACyB,KAAV,CAAgBhB,KAAhB,EAAuBS,SAAvB;AAEA,SAAOT,KAAP;AACD","sourcesContent":["import {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new Map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new Map();\n    for (const value of _) {\n      const key = value + \"\";\n      if (index.has(key)) continue;\n      index.set(key, domain.push(value));\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n"]},"metadata":{},"sourceType":"module"}