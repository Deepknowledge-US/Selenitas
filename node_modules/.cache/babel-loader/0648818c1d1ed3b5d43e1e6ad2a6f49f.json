{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/App.js\";\n// import React from 'react';\nimport React, { Component, lazy, Suspense } from 'react';\nimport Page from './components/Page/Page';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport 'jspanel4/dist/jspanel.min.css'; // import 'jspanel4/es6module/extensions/modal/jspanel.modal';\n\nimport { jsPanel } from 'jspanel4/es6module/jspanel';\nimport CreatePanel from './components/CreatePanel/CreatePanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }, this);\n};\n\n_c = App;\nexport default App; // // // Normal components\n// // import Clock from './components/clock';\n// import ActionButton from './components/ActionButton';\n// import CreatePortal from './components/createPortal';\n// // jsPanel default options\n// import jsPanelOptions from './jsPanelOptions';\n// // lazy loaded components\n// const DisplayName = lazy(() => import('./components/DisplayName'));\n// class App extends Component {\n// \tconstructor() {\n// \t  super();\n// \t  this.state = {\n// \t\tpanels: {}\n// \t  };\n// \t}\n// \tcreateJsPanel = (action, comp, modal = false) => {\n// \t  // keep Main component refrence\n// \t  const app = this;\n// \t  // check if its already mounted, bring it to front\n// \t  if (app.state.panels[action]) {\n// \t\treturn app.state.panels[action]['panel'].front(() => {\n// \t\t  app.state.panels[action]['panel'].resize({\n// \t\t\theight: 'auto'\n// \t\t  });\n// \t\t  app.state.panels[action]['panel'].reposition('center-top 0 20%');\n// \t\t});\n// \t  }\n// \t  const options = {\n// \t\t...jsPanelOptions,\n// \t\theaderTitle: action,\n// \t\tonclosed: () => {\n// \t\t  // remove closed jsPanel and its mounted component from state\n// \t\t  const appPanels = app.state.panels;\n// \t\t  if (appPanels[action]) {\n// \t\t\tdelete appPanels[action];\n// \t\t\tapp.setState({ panels: { ...appPanels } });\n// \t\t  }\n// \t\t}\n// \t  };\n// \t  // create jsPanel\n// \t  const panel = modal ? jsPanel.modal.create(options) : jsPanel.create(options);\n// \t  // save panel and compponent (this will be mounted later inside panel body) reference inside state\n// \t  app.setState({ panels: { ...app.state.panels, [action]: { panel, comp } } });\n// \t};\n// \trenderJsPanlesInsidePortal() {\n// \t  const panels = this.state.panels;\n// \t  return Object.keys(panels).map(action => {\n// \t\tconst jsPanel = panels[action].panel;\n// \t\tconst Comp = panels[action].comp;\n// \t\tconst node = document.getElementById(`${jsPanel.id}-node`);\n// \t\tlet counter = 0;\n// \t\tif (!Comp) return null;\n// \t\treturn (\n// \t\t  <CreatePortal rootNode={node} key={jsPanel.id}>\n// \t\t\t{Array.isArray(Comp) ? (\n// \t\t\t  Comp.map(C => (\n// \t\t\t\t<Suspense key={`${jsPanel.id}-${counter++}`} fallback={<div className=\"alert alert-info\">Loading...</div>}>\n// \t\t\t\t  <C jsPanel={jsPanel} />\n// \t\t\t\t</Suspense>\n// \t\t\t  ))\n// \t\t\t) : (\n// \t\t\t  <Suspense fallback={<div className=\"alert alert-info\">Loading...</div>}>\n// \t\t\t\t<Comp jsPanel={jsPanel} />\n// \t\t\t  </Suspense>\n// \t\t\t)}\n// \t\t  </CreatePortal>\n// \t\t);\n// \t  });\n// \t}\n// \trender() {\n// \t  const jsPanels = Object.keys(this.state.panels);\n// \t  const actionButtonProps = {\n// \t\tclassName: 'btn btn-outline-primary ml-2 mb-2',\n// \t\thandleClick: this.createJsPanel\n// \t  };\n// \t  return (\n// \t\t<div className=\"container-fluid\">\n// \t\t  <div className=\"row bg-dark text-white shadow p-2\">\n// \t\t\t<div className=\"col-md-12\">\n// \t\t\t  <h4 className=\"text-center\">jsPanel with react</h4>\n// \t\t\t</div>\n// \t\t  </div>\n// \t\t  <div className=\"row justify-content-center mt-4\">\n// \t\t\t<div className=\"card\">\n// \t\t\t  <div className=\"card-body\">\n// \t\t\t\t<ActionButton {...actionButtonProps} title=\"Simple Example\" comp={DisplayName} />\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t  </div>\n// \t\t  {jsPanels.length > 0 && this.renderJsPanlesInsidePortal()}\n// \t\t</div>\n// \t  );\n// \t}\n//   }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/App.js"],"names":["React","Component","lazy","Suspense","Page","jsPanel","CreatePanel","App"],"mappings":";AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAO,sCAAP;AACA,OAAO,WAAP;AACA,OAAO,oBAAP;AACA,OAAO,+BAAP,C,CACA;;AACA,SAASC,OAAT,QAAwB,4BAAxB;AAGA,OAAOC,WAAP,MAAwB,sCAAxB;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AACjB,sBACC;AAAA,2BACC,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAND;;KAAMA,G;AAQN,eAAeA,GAAf,C,CAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA","sourcesContent":["\n// import React from 'react';\nimport React, { Component, lazy, Suspense } from 'react';\nimport Page from './components/Page/Page'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport 'jspanel4/dist/jspanel.min.css';\n// import 'jspanel4/es6module/extensions/modal/jspanel.modal';\nimport { jsPanel } from 'jspanel4/es6module/jspanel';\n\n\nimport CreatePanel from './components/CreatePanel/CreatePanel'\n\n\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Page />\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n\n\n// // // Normal components\n// // import Clock from './components/clock';\n// import ActionButton from './components/ActionButton';\n// import CreatePortal from './components/createPortal';\n\n// // jsPanel default options\n// import jsPanelOptions from './jsPanelOptions';\n\n// // lazy loaded components\n// const DisplayName = lazy(() => import('./components/DisplayName'));\n\n\n// class App extends Component {\n// \tconstructor() {\n// \t  super();\n// \t  this.state = {\n// \t\tpanels: {}\n// \t  };\n// \t}\n  \n// \tcreateJsPanel = (action, comp, modal = false) => {\n// \t  // keep Main component refrence\n// \t  const app = this;\n// \t  // check if its already mounted, bring it to front\n// \t  if (app.state.panels[action]) {\n// \t\treturn app.state.panels[action]['panel'].front(() => {\n// \t\t  app.state.panels[action]['panel'].resize({\n// \t\t\theight: 'auto'\n// \t\t  });\n// \t\t  app.state.panels[action]['panel'].reposition('center-top 0 20%');\n// \t\t});\n// \t  }\n  \n// \t  const options = {\n// \t\t...jsPanelOptions,\n// \t\theaderTitle: action,\n// \t\tonclosed: () => {\n// \t\t  // remove closed jsPanel and its mounted component from state\n// \t\t  const appPanels = app.state.panels;\n// \t\t  if (appPanels[action]) {\n// \t\t\tdelete appPanels[action];\n// \t\t\tapp.setState({ panels: { ...appPanels } });\n// \t\t  }\n// \t\t}\n// \t  };\n// \t  // create jsPanel\n// \t  const panel = modal ? jsPanel.modal.create(options) : jsPanel.create(options);\n// \t  // save panel and compponent (this will be mounted later inside panel body) reference inside state\n// \t  app.setState({ panels: { ...app.state.panels, [action]: { panel, comp } } });\n// \t};\n  \n// \trenderJsPanlesInsidePortal() {\n// \t  const panels = this.state.panels;\n// \t  return Object.keys(panels).map(action => {\n// \t\tconst jsPanel = panels[action].panel;\n// \t\tconst Comp = panels[action].comp;\n// \t\tconst node = document.getElementById(`${jsPanel.id}-node`);\n// \t\tlet counter = 0;\n// \t\tif (!Comp) return null;\n// \t\treturn (\n// \t\t  <CreatePortal rootNode={node} key={jsPanel.id}>\n// \t\t\t{Array.isArray(Comp) ? (\n// \t\t\t  Comp.map(C => (\n// \t\t\t\t<Suspense key={`${jsPanel.id}-${counter++}`} fallback={<div className=\"alert alert-info\">Loading...</div>}>\n// \t\t\t\t  <C jsPanel={jsPanel} />\n// \t\t\t\t</Suspense>\n// \t\t\t  ))\n// \t\t\t) : (\n// \t\t\t  <Suspense fallback={<div className=\"alert alert-info\">Loading...</div>}>\n// \t\t\t\t<Comp jsPanel={jsPanel} />\n// \t\t\t  </Suspense>\n// \t\t\t)}\n// \t\t  </CreatePortal>\n// \t\t);\n// \t  });\n// \t}\n  \n// \trender() {\n// \t  const jsPanels = Object.keys(this.state.panels);\n// \t  const actionButtonProps = {\n// \t\tclassName: 'btn btn-outline-primary ml-2 mb-2',\n// \t\thandleClick: this.createJsPanel\n// \t  };\n// \t  return (\n// \t\t<div className=\"container-fluid\">\n// \t\t  <div className=\"row bg-dark text-white shadow p-2\">\n// \t\t\t<div className=\"col-md-12\">\n// \t\t\t  <h4 className=\"text-center\">jsPanel with react</h4>\n// \t\t\t</div>\n// \t\t  </div>\n// \t\t  <div className=\"row justify-content-center mt-4\">\n// \t\t\t<div className=\"card\">\n// \t\t\t  <div className=\"card-body\">\n// \t\t\t\t<ActionButton {...actionButtonProps} title=\"Simple Example\" comp={DisplayName} />\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t  </div>\n// \t\t  {jsPanels.length > 0 && this.renderJsPanlesInsidePortal()}\n// \t\t</div>\n// \t  );\n// \t}\n//   }\n\n\n\n// export default App;"]},"metadata":{},"sourceType":"module"}