{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel';\nimport Chart from '../D3/Chart/Chart';\nimport './hook.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Receiver = ({\n  payload,\n  publish\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [monitors, setMonitors] = useState([]);\n  const [init, setInit] = useState(false); // monitors is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n  // This maps have two keys -> ID is the name of the var we want to track and values are a list of maps, each one of them containing two keys -> time and a value associated to this time. \n  // const monitors = [\n  // \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n  // \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n  // ];\n\n  useEffect(() => {\n    if (payload.topic) {\n      setMessages(messages => [...messages, payload]);\n\n      if (payload.topic.includes('panel_info')) {\n        // console.log('--- start panel_info ---');\n        const jsonObject = JSON.parse(payload.message);\n\n        for (const [k, v] of Object.entries(jsonObject)) {\n          if (k !== 'Monitor') {\n            createWindow(v, publish);\n          }\n        } // console.log('--- end ---');\n\n      } else if (payload.topic.includes('update')) {\n        console.log(payload.topic);\n        console.log('--- start update ---');\n        const jsonObject = JSON.parse(payload.message);\n\n        if (monitors.length === 0) {\n          setInit(true);\n\n          for (const [k, v] of Object.entries(jsonObject)) {\n            console.log('\\nEn el init', k, v);\n            const vals = {\n              id: k,\n              values: [{\n                time: 0,\n                value: v\n              }]\n            };\n            monitors.push(vals);\n          }\n        } else {\n          for (const [k, v] of Object.entries(jsonObject)) {\n            for (let aVar of monitors) {\n              if (aVar.id === k) {\n                const lastElement = aVar.values[aVar.values.length - 1];\n                const newTime = lastElement.time + 1;\n                const newInput = {\n                  time: newTime,\n                  value: v\n                };\n                aVar.values.push(newInput);\n              }\n            }\n          }\n        }\n\n        console.log('--- end ---');\n      }\n    }\n  }, [payload, publish]);\n\n  const renderListItem = item => /*#__PURE__*/_jsxDEV(List.Item, {\n    children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n      title: item.topic,\n      description: item.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"Receiver\",\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      size: \"small\",\n      bordered: true,\n      dataSource: messages // renderItem={renderListItem}\n      ,\n      style: {\n        maxHeight: '15em',\n        overflow: 'scroll'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), init && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"allMonitorsDiv\",\n      children: monitors.map(function (item) {\n        const newMonitor = [item];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"monitorDiv\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Chart, {\n            data: newMonitor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 53\n          }, this), \" \"]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 14\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Receiver, \"SeieVsyWNqqYNrkO2hv+PqXrGGU=\");\n\n_c = Receiver;\nexport default Receiver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js"],"names":["React","useEffect","useState","Card","List","createWindow","Chart","Receiver","payload","publish","messages","setMessages","monitors","setMonitors","init","setInit","topic","includes","jsonObject","JSON","parse","message","k","v","Object","entries","console","log","length","vals","id","values","time","value","push","aVar","lastElement","newTime","newInput","renderListItem","item","maxHeight","overflow","map","newMonitor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel'\nimport Chart from '../D3/Chart/Chart'\n\nimport './hook.css'\n\nconst Receiver = ({ payload, publish }) => {\n\tconst [messages, setMessages] = useState([])\n\tconst [monitors, setMonitors] = useState([])\n\tconst [init, setInit]         = useState(false)\n\n\n\t// monitors is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n\t// This maps have two keys -> ID is the name of the var we want to track and values are a list of maps, each one of them containing two keys -> time and a value associated to this time. \n\n\t// const monitors = [\n\t// \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n\t// \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n\t// ];\n\n\tuseEffect(() => {\n\t\tif (payload.topic) {\n\t\t\tsetMessages(messages => [...messages, payload]);\n\t\t\tif (payload.topic.includes('panel_info') ) {\n\n\t\t\t\t// console.log('--- start panel_info ---');\n\t\t\t\tconst jsonObject = JSON.parse(payload.message);\n\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\tif (k !== 'Monitor') {\n\t\t\t\t\t\tcreateWindow(v, publish)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log('--- end ---');\n\t\t\t}\n\t\t\telse if ( payload.topic.includes('update') ) {\n\t\t\t\tconsole.log(payload.topic)\n\n\t\t\t\tconsole.log('--- start update ---');\n\t\t\t\tconst jsonObject = JSON.parse(payload.message);\n\n\t\t\t\tif (monitors.length === 0) {\n\t\t\t\t\tsetInit(true)\n\n\t\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\t\tconsole.log('\\nEn el init', k, v )\n\t\t\t\t\t\tconst vals = {\n\t\t\t\t\t\t\tid: k,\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{time: 0, value:v},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmonitors.push(vals)\n\t\t\t\t\t}\n\n\t\t\t\t}else{\n\n\t\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\t\tfor (let aVar of monitors) {\n\t\t\t\t\t\t\tif (aVar.id === k) {\n\t\t\t\t\t\t\t\tconst lastElement  \t= aVar.values[aVar.values.length -1];\n\t\t\t\t\t\t\t\tconst newTime  \t\t= lastElement.time + 1;\n\t\t\t\t\t\t\t\tconst newInput\t\t= {time: newTime, value:v};\n\t\t\t\t\t\t\t\taVar.values.push(newInput)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log('--- end ---');\n\t\t\t}\n\t\t}\n\t}, [payload, publish]);\n\n\tconst renderListItem = (item) => (\n\t\t<List.Item>\n\t\t\t<List.Item.Meta\n\t\t\t\ttitle={item.topic}\n\t\t\t\tdescription={item.message}\n\t\t\t/>\n\t\t</List.Item>\n\t);\n\n\treturn (\n\t\t<Card title=\"Receiver\">\n\t\t\t<List\n\t\t\t\tsize=\"small\"\n\t\t\t\tbordered\n\t\t\t\tdataSource={messages}\n\t\t\t\t// renderItem={renderListItem}\n\t\t\t\tstyle={{maxHeight:'15em' ,overflow:'scroll'}}\n\t\t\t/>\n\t\t\t{ init && \n\t\t\t\t<div id='allMonitorsDiv'>\n\t\t\t\t\t{monitors.map(function(item) {\n\t\t\t\t\t\tconst newMonitor = [item]\n\t\t\t\t\t\treturn <div key={item.id} class='monitorDiv'> <Chart data={newMonitor} /> </div>;\n\t\t\t\t  \t})}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t</Card>\n\t);\n}\n\nexport default Receiver;\n"]},"metadata":{},"sourceType":"module"}