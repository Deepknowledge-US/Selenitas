{"ast":null,"code":"import _toConsumableArray from\"/home/one/NIN/nin_0.3.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/one/NIN/nin_0.3.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useContext}from'react';import{Card,List}from'antd';import createWindow from'../CreatePanel/CreatePanel';import Chart from'../D3/Chart/Chart';import{NewContext}from'./index';import'./hook.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Receiver=function Receiver(_ref){var payload=_ref.payload,publish=_ref.publish;var _useContext=useContext(NewContext),state=_useContext.state,dispatch=_useContext.dispatch;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),init=_useState2[0],setInit=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];// \"monitors\" is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n// This maps have two keys -> \"id\" is the name of the var we want to track and \"values\" are a list of maps, each one of them containing two keys -> time (x axis) and a value (y axis) associated to this time. \n// When component is created, \"monitors\" is an empty Array, but it will be populated with the mqtt messagges.\n// const monitors = [\n// \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n// \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n// ];\nvar _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),monitors=_useState6[0],setMonitors=_useState6[1];var _useState7=useState({}),_useState8=_slicedToArray(_useState7,2),monitors2=_useState8[0],setMonitors2=_useState8[1];useEffect(function(){if(state.setupClicked){setMonitors([]);setMonitors2({});dispatch({type:'unSetup'});}},[state]);// At the moment, two posible topics:\n// - from_server/panel_info\n// - from_server/update\nvar topicOption={'from_server/panel_info':function from_serverPanel_info(jsonObj){for(var _i=0,_Object$entries=Object.entries(jsonObj);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),k=_Object$entries$_i[0],v=_Object$entries$_i[1];if(k!=='Monitor'){createWindow(v,publish);}}},'from_server/update':function from_serverUpdate(jsonObj){if(Object.keys(monitors2).length===0){setInit(true);for(var _i2=0,_Object$entries2=Object.entries(jsonObj);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),k=_Object$entries2$_i[0],v=_Object$entries2$_i[1];monitors2[k]=[{time:0,value:v}];}}else{for(var _i3=0,_Object$entries3=Object.entries(jsonObj);_i3<_Object$entries3.length;_i3++){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),_k=_Object$entries3$_i[0],_v=_Object$entries3$_i[1];var targetVar=monitors2[_k];var lastElement=targetVar[targetVar.length-1];var newTime=lastElement.time+1;var newInput={time:newTime,value:_v};targetVar.push(newInput);}}}};useEffect(function(){if(payload.topic){var jsonObject=JSON.parse(payload.message);setMessages(function(messages){return[].concat(_toConsumableArray(messages),[payload]);});topicOption[payload.topic](jsonObject);}},[payload]);var renderListItem=function renderListItem(item){return/*#__PURE__*/_jsx(List.Item,{children:/*#__PURE__*/_jsx(List.Item.Meta,{title:item.topic,description:item.message})});};return/*#__PURE__*/_jsx(Card,{title:\"Receiver\",children:init&&/*#__PURE__*/_jsx(\"div\",{id:\"allMonitorsDiv\",children:Object.keys(monitors2).map(function(key){var newMonitor=[{id:key,values:monitors2[key]}];return/*#__PURE__*/_jsxs(\"div\",{className:\"monitorDiv\",children:[\" \",/*#__PURE__*/_jsx(Chart,{data:newMonitor}),\" \"]},key);})})});};export default Receiver;","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js"],"names":["React","useEffect","useState","useContext","Card","List","createWindow","Chart","NewContext","Receiver","payload","publish","state","dispatch","init","setInit","messages","setMessages","monitors","setMonitors","monitors2","setMonitors2","setupClicked","type","topicOption","jsonObj","Object","entries","k","v","keys","length","time","value","targetVar","lastElement","newTime","newInput","push","topic","jsonObject","JSON","parse","message","renderListItem","item","map","key","newMonitor","id","values"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel'\nimport Chart from '../D3/Chart/Chart'\nimport { NewContext } from './index'\n\nimport './hook.css'\n\nconst Receiver = ({ payload, publish }) => {\n\tconst {state, dispatch} \t  = useContext(NewContext);\n\tconst [init, setInit]         = useState(false);\n\tconst [messages, setMessages] = useState([]);\n\n\t// \"monitors\" is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n\t// This maps have two keys -> \"id\" is the name of the var we want to track and \"values\" are a list of maps, each one of them containing two keys -> time (x axis) and a value (y axis) associated to this time. \n\t// When component is created, \"monitors\" is an empty Array, but it will be populated with the mqtt messagges.\n\n\t// const monitors = [\n\t// \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n\t// \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n\t// ];\n\tconst [monitors, setMonitors] = useState([]);\n\tconst [monitors2, setMonitors2] = useState({});\n\n\tuseEffect( () => {\n\t\tif (state.setupClicked) {\n\t\t\tsetMonitors([]);\n\t\t\tsetMonitors2({});\n\t\t\tdispatch({type: 'unSetup'});\n\t\t}\n\t}, [state]);\n\n\t// At the moment, two posible topics:\n\t// - from_server/panel_info\n\t// - from_server/update\n\tconst topicOption = {\n\t\t'from_server/panel_info': (jsonObj) => {\n\t\t\tfor (const [k,v] of Object.entries(jsonObj) ) {\n\t\t\t\tif (k !== 'Monitor') {\n\t\t\t\t\tcreateWindow(v, publish)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t'from_server/update': (jsonObj) => {\n\t\t\tif (Object.keys(monitors2).length === 0) {\n\t\t\t\tsetInit(true)\n\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObj) ) {\n\t\t\t\t\tmonitors2[k] = [{time: 0, value:v}];\n\t\t\t\t}\n\n\t\t\t}else{\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObj) ) {\n\n\t\t\t\t\tconst targetVar \t= monitors2[k];\n\n\t\t\t\t\tconst lastElement  \t= targetVar[targetVar.length -1];\n\t\t\t\t\tconst newTime  \t\t= lastElement.time + 1;\n\t\t\t\t\tconst newInput\t\t= {time: newTime, value:v};\n\t\t\t\t\ttargetVar.push(newInput)\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t}\t\t\t\n\n\t\t},\n\t}\n\n\tuseEffect(() => {\n\t\tif (payload.topic) {\n\t\t\tconst jsonObject = JSON.parse(payload.message);\n\t\t\tsetMessages(messages => [...messages, payload]);\n\n\t\t\ttopicOption[payload.topic](jsonObject);\n\t\t}\n\t}, [payload]);\n\n\tconst renderListItem = (item) => (\n\t\t<List.Item>\n\t\t\t<List.Item.Meta\n\t\t\t\ttitle={item.topic}\n\t\t\t\tdescription={item.message}\n\t\t\t/>\n\t\t</List.Item>\n\t);\n\n\treturn (\n\t\t<Card title=\"Receiver\">\n\t\t\t{/* When Uncommented, incoming MQTT messages are displayed */}\n\t\t\t{/* <List\n\t\t\t\tsize=\"small\"\n\t\t\t\tbordered\n\t\t\t\tdataSource={messages}\n\t\t\t\t// renderItem={renderListItem}\n\t\t\t\tstyle={{maxHeight:'15em' ,overflow:'scroll'}}\n\t\t\t/> */}\n\t\t\t{ init && \n\t\t\t\t<div id='allMonitorsDiv'>\n\t\t\t\t\t{Object.keys(monitors2).map(function(key) {\n\t\t\t\t\t\tconst newMonitor = [{id:key, values:monitors2[key]}]\n\t\t\t\t\t\treturn <div key={key} className='monitorDiv'> <Chart data={newMonitor} /> </div>;\n\t\t\t\t  \t})}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{/* { init && \n\t\t\t\t<div id='allMonitorsDiv'>\n\t\t\t\t\t{monitors.map(function(item) {\n\t\t\t\t\t\tconst newMonitor = [item]\n\t\t\t\t\t\treturn <div key={item.id} class='monitorDiv'> <Chart data={newMonitor} /> </div>;\n\t\t\t\t  \t})}\n\t\t\t\t</div>\n\t\t\t} */}\n\t\t\t\n\t\t</Card>\n\t);\n}\n\nexport default Receiver;\n"]},"metadata":{},"sourceType":"module"}