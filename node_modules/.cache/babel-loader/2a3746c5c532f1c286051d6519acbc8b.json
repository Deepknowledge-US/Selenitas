{"ast":null,"code":"var removeElementsByClass=function removeElementsByClass(className){var elements=document.getElementsByClassName(className);while(elements.length>0){elements[0].parentNode.removeChild(elements[0]);}};export var modelLoad=function modelLoad(value,publish){// New panels are created with class 'panel_div', we need to remove this elements before create new ones\nremoveElementsByClass('jsPanel');// In the Lua side, models must be created in a folder named as the model file and this folder must be placed inside the Resources folder\nvar fileName=value.target.files[0].name;var dirName=fileName.split('.')[0];// At the moment, the separator is \"|\"\npublish({topic:'from_client',qos:0,payload:'Load|'+dirName+'/'+fileName});};export var modelSetup=function modelSetup(publish,dispatch){dispatch({type:'setup'});publish({topic:'from_client',qos:0,payload:'Setup'});};export var modelStep=function modelStep(publish){publish({topic:'from_client',qos:0,payload:'Step'});};export var modelRun=function modelRun(publish){publish({topic:'from_client',qos:0,payload:'Run'});};export var modelSpeed=function modelSpeed(value,publish){publish({topic:'from_client',qos:0,payload:'Speed:'+value});};export var modelViewStats=function modelViewStats(publish){publish({topic:'from_client',qos:0,payload:'ToggleView:Stats'});};export var modelViewWindows=function modelViewWindows(publish){publish({topic:'from_client',qos:0,payload:'ToggleView:Windows'});};export var modelViewFamilies=function modelViewFamilies(publish){publish({topic:'from_client',qos:0,payload:'ToggleView:Families'});};export var modelViewGrid=function modelViewGrid(publish){publish({topic:'from_client',qos:0,payload:'ToggleView:Grid'});};","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Mqtt/Publisher/publisherLogic.js"],"names":["removeElementsByClass","className","elements","document","getElementsByClassName","length","parentNode","removeChild","modelLoad","value","publish","fileName","target","files","name","dirName","split","topic","qos","payload","modelSetup","dispatch","type","modelStep","modelRun","modelSpeed","modelViewStats","modelViewWindows","modelViewFamilies","modelViewGrid"],"mappings":"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","sourcesContent":["const removeElementsByClass = (className) => {\n    const elements = document.getElementsByClassName(className);\n    while(elements.length > 0){\n        elements[0].parentNode.removeChild(elements[0]);\n    }\n}\n\nexport const modelLoad = (value, publish) => {\n    // New panels are created with class 'panel_div', we need to remove this elements before create new ones\n    removeElementsByClass('jsPanel')\n\n    // In the Lua side, models must be created in a folder named as the model file and this folder must be placed inside the Resources folder\n    const fileName \t= value.target.files[0].name\n    const dirName \t= fileName.split('.')[0]\n\n    // At the moment, the separator is \"|\"\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'Load|' + dirName + '/' + fileName\n    })\n};\n\nexport const modelSetup = (publish, dispatch) => {\n    dispatch({type: 'setup'});\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'Setup'\n    });\n};\n\nexport const modelStep = (publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'Step'\n    })\n};\n\nexport const modelRun = (publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'Run'\n    })\n};\n\nexport const modelSpeed = (value,publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'Speed:'+ value\n    })\n};\n\nexport const modelViewStats = (publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'ToggleView:Stats'\n    })\n};\n\nexport const modelViewWindows = (publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'ToggleView:Windows'\n    })\n};\n\nexport const modelViewFamilies = (publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'ToggleView:Families'\n    })\n};\n\nexport const modelViewGrid = (publish) => {\n    publish({\n        topic: 'from_client',\n        qos: 0,\n        payload: 'ToggleView:Grid'\n    })\n};\n"]},"metadata":{},"sourceType":"module"}