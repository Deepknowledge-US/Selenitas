{"ast":null,"code":"/** @license React vundefined\n * react-refresh-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n    // nor polyfill, then a plain number is used for performance.\n\n    var hasSymbol = typeof Symbol === 'function' && Symbol.for; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n    // (unstable) APIs that have been removed. Can we remove the symbols?\n\n    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.\n    // It's OK to reference families, but use WeakMap/Set for types.\n\n    var allFamiliesByID = new Map();\n    var allFamiliesByType = new PossiblyWeakMap();\n    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families\n    // that have actually been edited here. This keeps checks fast.\n    // $FlowIssue\n\n    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.\n    // It is an array of [Family, NextType] tuples.\n\n    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.\n\n    var helpersByRendererID = new Map();\n    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.\n\n    var mountedRoots = new Set(); // If a root captures an error, we add its element to this Map so we can retry on edit.\n\n    var failedRoots = new Map();\n    var didSomeRootFailOnMount = false;\n\n    function computeFullKey(signature) {\n      if (signature.fullKey !== null) {\n        return signature.fullKey;\n      }\n\n      var fullKey = signature.ownKey;\n      var hooks;\n\n      try {\n        hooks = signature.getCustomHooks();\n      } catch (err) {\n        // This can happen in an edge case, e.g. if expression like Foo.useSomething\n        // depends on Foo which is lazily initialized during rendering.\n        // In that case just assume we'll have to remount.\n        signature.forceReset = true;\n        signature.fullKey = fullKey;\n        return fullKey;\n      }\n\n      for (var i = 0; i < hooks.length; i++) {\n        var hook = hooks[i];\n\n        if (typeof hook !== 'function') {\n          // Something's wrong. Assume we need to remount.\n          signature.forceReset = true;\n          signature.fullKey = fullKey;\n          return fullKey;\n        }\n\n        var nestedHookSignature = allSignaturesByType.get(hook);\n\n        if (nestedHookSignature === undefined) {\n          // No signature means Hook wasn't in the source code, e.g. in a library.\n          // We'll skip it because we can assume it won't change during this session.\n          continue;\n        }\n\n        var nestedHookKey = computeFullKey(nestedHookSignature);\n\n        if (nestedHookSignature.forceReset) {\n          signature.forceReset = true;\n        }\n\n        fullKey += '\\n---\\n' + nestedHookKey;\n      }\n\n      signature.fullKey = fullKey;\n      return fullKey;\n    }\n\n    function haveEqualSignatures(prevType, nextType) {\n      var prevSignature = allSignaturesByType.get(prevType);\n      var nextSignature = allSignaturesByType.get(nextType);\n\n      if (prevSignature === undefined && nextSignature === undefined) {\n        return true;\n      }\n\n      if (prevSignature === undefined || nextSignature === undefined) {\n        return false;\n      }\n\n      if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {\n        return false;\n      }\n\n      if (nextSignature.forceReset) {\n        return false;\n      }\n\n      return true;\n    }\n\n    function isReactClass(type) {\n      return type.prototype && type.prototype.isReactComponent;\n    }\n\n    function canPreserveStateBetween(prevType, nextType) {\n      if (isReactClass(prevType) || isReactClass(nextType)) {\n        return false;\n      }\n\n      if (haveEqualSignatures(prevType, nextType)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    function resolveFamily(type) {\n      // Only check updated types to keep lookups fast.\n      return updatedFamiliesByType.get(type);\n    }\n\n    function performReactRefresh() {\n      {\n        if (pendingUpdates.length === 0) {\n          return null;\n        }\n\n        var staleFamilies = new Set();\n        var updatedFamilies = new Set();\n        var updates = pendingUpdates;\n        pendingUpdates = [];\n        updates.forEach(function (_ref) {\n          var family = _ref[0],\n              nextType = _ref[1]; // Now that we got a real edit, we can create associations\n          // that will be read by the React reconciler.\n\n          var prevType = family.current;\n          updatedFamiliesByType.set(prevType, family);\n          updatedFamiliesByType.set(nextType, family);\n          family.current = nextType; // Determine whether this should be a re-render or a re-mount.\n\n          if (canPreserveStateBetween(prevType, nextType)) {\n            updatedFamilies.add(family);\n          } else {\n            staleFamilies.add(family);\n          }\n        }); // TODO: rename these fields to something more meaningful.\n\n        var update = {\n          updatedFamilies: updatedFamilies,\n          // Families that will re-render preserving state\n          staleFamilies: staleFamilies // Families that will be remounted\n\n        };\n        helpersByRendererID.forEach(function (helpers) {\n          // Even if there are no roots, set the handler on first update.\n          // This ensures that if *new* roots are mounted, they'll use the resolve handler.\n          helpers.setRefreshHandler(resolveFamily);\n        });\n        var didError = false;\n        var firstError = null;\n        failedRoots.forEach(function (element, root) {\n          var helpers = helpersByRoot.get(root);\n\n          if (helpers === undefined) {\n            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n          }\n\n          try {\n            helpers.scheduleRoot(root, element);\n          } catch (err) {\n            if (!didError) {\n              didError = true;\n              firstError = err;\n            } // Keep trying other roots.\n\n          }\n        });\n        mountedRoots.forEach(function (root) {\n          var helpers = helpersByRoot.get(root);\n\n          if (helpers === undefined) {\n            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n          }\n\n          try {\n            helpers.scheduleRefresh(root, update);\n          } catch (err) {\n            if (!didError) {\n              didError = true;\n              firstError = err;\n            } // Keep trying other roots.\n\n          }\n        });\n\n        if (didError) {\n          throw firstError;\n        }\n\n        return update;\n      }\n    }\n\n    function register(type, id) {\n      {\n        if (type === null) {\n          return;\n        }\n\n        if (typeof type !== 'function' && typeof type !== 'object') {\n          return;\n        } // This can happen in an edge case, e.g. if we register\n        // return value of a HOC but it returns a cached component.\n        // Ignore anything but the first registration for each type.\n\n\n        if (allFamiliesByType.has(type)) {\n          return;\n        } // Create family or remember to update it.\n        // None of this bookkeeping affects reconciliation\n        // until the first performReactRefresh() call above.\n\n\n        var family = allFamiliesByID.get(id);\n\n        if (family === undefined) {\n          family = {\n            current: type\n          };\n          allFamiliesByID.set(id, family);\n        } else {\n          pendingUpdates.push([family, type]);\n        }\n\n        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.\n\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_FORWARD_REF_TYPE:\n              register(type.render, id + '$render');\n              break;\n\n            case REACT_MEMO_TYPE:\n              register(type.type, id + '$type');\n              break;\n          }\n        }\n      }\n    }\n\n    function setSignature(type, key) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;\n      {\n        allSignaturesByType.set(type, {\n          forceReset: forceReset,\n          ownKey: key,\n          fullKey: null,\n          getCustomHooks: getCustomHooks || function () {\n            return [];\n          }\n        });\n      }\n    } // This is lazily called during first render for a type.\n    // It captures Hook list at that time so inline requires don't break comparisons.\n\n\n    function collectCustomHooksForSignature(type) {\n      {\n        var signature = allSignaturesByType.get(type);\n\n        if (signature !== undefined) {\n          computeFullKey(signature);\n        }\n      }\n    }\n\n    function getFamilyByID(id) {\n      {\n        return allFamiliesByID.get(id);\n      }\n    }\n\n    function getFamilyByType(type) {\n      {\n        return allFamiliesByType.get(type);\n      }\n    }\n\n    function findAffectedHostInstances(families) {\n      {\n        var affectedInstances = new Set();\n        mountedRoots.forEach(function (root) {\n          var helpers = helpersByRoot.get(root);\n\n          if (helpers === undefined) {\n            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n          }\n\n          var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);\n          instancesForRoot.forEach(function (inst) {\n            affectedInstances.add(inst);\n          });\n        });\n        return affectedInstances;\n      }\n    }\n\n    function injectIntoGlobalHook(globalObject) {\n      {\n        // For React Native, the global hook will be set up by require('react-devtools-core').\n        // That code will run before us. So we need to monkeypatch functions on existing hook.\n        // For React Web, the global hook will be set up by the extension.\n        // This will also run before us.\n        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n        if (hook === undefined) {\n          // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.\n          // Note that in this case it's important that renderer code runs *after* this method call.\n          // Otherwise, the renderer will think that there is no global hook, and won't do the injection.\n          var nextID = 0;\n          globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {\n            supportsFiber: true,\n            inject: function (injected) {\n              return nextID++;\n            },\n            onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},\n            onCommitFiberUnmount: function () {}\n          };\n        } // Here, we just want to get a reference to scheduleRefresh.\n\n\n        var oldInject = hook.inject;\n\n        hook.inject = function (injected) {\n          var id = oldInject.apply(this, arguments);\n\n          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {\n            // This version supports React Refresh.\n            helpersByRendererID.set(id, injected);\n          }\n\n          return id;\n        }; // We also want to track currently mounted roots.\n\n\n        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;\n\n        hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {\n          var helpers = helpersByRendererID.get(id);\n\n          if (helpers === undefined) {\n            return;\n          }\n\n          helpersByRoot.set(root, helpers);\n          var current = root.current;\n          var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.\n          // This logic is copy-pasted from similar logic in the DevTools backend.\n          // If this breaks with some refactoring, you'll want to update DevTools too.\n\n          if (alternate !== null) {\n            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;\n            var isMounted = current.memoizedState != null && current.memoizedState.element != null;\n\n            if (!wasMounted && isMounted) {\n              // Mount a new root.\n              mountedRoots.add(root);\n              failedRoots.delete(root);\n            } else if (wasMounted && isMounted) {// Update an existing root.\n              // This doesn't affect our mounted root Set.\n            } else if (wasMounted && !isMounted) {\n              // Unmount an existing root.\n              mountedRoots.delete(root);\n\n              if (didError) {\n                // We'll remount it on future edits.\n                // Remember what was rendered so we can restore it.\n                failedRoots.set(root, alternate.memoizedState.element);\n              } else {\n                helpersByRoot.delete(root);\n              }\n            } else if (!wasMounted && !isMounted) {\n              if (didError && !failedRoots.has(root)) {\n                // The root had an error during the initial mount.\n                // We can't read its last element from the memoized state\n                // because there was no previously committed alternate.\n                // Ideally, it would be nice if we had a way to extract\n                // the last attempted rendered element, but accessing the update queue\n                // would tie this package too closely to the reconciler version.\n                // So instead, we just set a flag.\n                // TODO: Maybe we could fix this as the same time as when we fix\n                // DevTools to not depend on `alternate.memoizedState.element`.\n                didSomeRootFailOnMount = true;\n              }\n            }\n          } else {\n            // Mount a new root.\n            mountedRoots.add(root);\n          }\n\n          return oldOnCommitFiberRoot.apply(this, arguments);\n        };\n      }\n    }\n\n    function hasUnrecoverableErrors() {\n      return didSomeRootFailOnMount;\n    } // Exposed for testing.\n\n\n    function _getMountedRootCount() {\n      {\n        return mountedRoots.size;\n      }\n    } // This is a wrapper over more primitive functions for setting signature.\n    // Signatures let us decide whether the Hook order has changed on refresh.\n    //\n    // This function is intended to be used as a transform target, e.g.:\n    // var _s = createSignatureFunctionForTransform()\n    //\n    // function Hello() {\n    //   const [foo, setFoo] = useState(0);\n    //   const value = useCustomHook();\n    //   _s(); /* Second call triggers collecting the custom Hook list.\n    //          * This doesn't happen during the module evaluation because we\n    //          * don't want to change the module order with inline requires.\n    //          * Next calls are noops. */\n    //   return <h1>Hi</h1>;\n    // }\n    //\n    // /* First call specifies the signature: */\n    // _s(\n    //   Hello,\n    //   'useState{[foo, setFoo]}(0)',\n    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */\n    // );\n\n\n    function createSignatureFunctionForTransform() {\n      {\n        // We'll fill in the signature in two steps.\n        // First, we'll know the signature itself. This happens outside the component.\n        // Then, we'll know the references to custom Hooks. This happens inside the component.\n        // After that, the returned function will be a fast path no-op.\n        var status = 'needsSignature';\n        var savedType;\n        var hasCustomHooks;\n        return function (type, key, forceReset, getCustomHooks) {\n          switch (status) {\n            case 'needsSignature':\n              if (type !== undefined) {\n                // If we received an argument, this is the initial registration call.\n                savedType = type;\n                hasCustomHooks = typeof getCustomHooks === 'function';\n                setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.\n\n                status = 'needsCustomHooks';\n              }\n\n              break;\n\n            case 'needsCustomHooks':\n              if (hasCustomHooks) {\n                collectCustomHooksForSignature(savedType);\n              }\n\n              status = 'resolved';\n              break;\n\n            case 'resolved':\n              // Do nothing. Fast path for all future renders.\n              break;\n          }\n\n          return type;\n        };\n      }\n    }\n\n    function isLikelyComponentType(type) {\n      {\n        switch (typeof type) {\n          case 'function':\n            {\n              // First, deal with classes.\n              if (type.prototype != null) {\n                if (type.prototype.isReactComponent) {\n                  // React class.\n                  return true;\n                }\n\n                var ownNames = Object.getOwnPropertyNames(type.prototype);\n\n                if (ownNames.length > 1 || ownNames[0] !== 'constructor') {\n                  // This looks like a class.\n                  return false;\n                } // eslint-disable-next-line no-proto\n\n\n                if (type.prototype.__proto__ !== Object.prototype) {\n                  // It has a superclass.\n                  return false;\n                } // Pass through.\n                // This looks like a regular function with empty prototype.\n\n              } // For plain functions and arrows, use name as a heuristic.\n\n\n              var name = type.name || type.displayName;\n              return typeof name === 'string' && /^[A-Z]/.test(name);\n            }\n\n          case 'object':\n            {\n              if (type != null) {\n                switch (type.$$typeof) {\n                  case REACT_FORWARD_REF_TYPE:\n                  case REACT_MEMO_TYPE:\n                    // Definitely React components.\n                    return true;\n\n                  default:\n                    return false;\n                }\n              }\n\n              return false;\n            }\n\n          default:\n            {\n              return false;\n            }\n        }\n      }\n    }\n\n    var ReactFreshRuntime = Object.freeze({\n      performReactRefresh: performReactRefresh,\n      register: register,\n      setSignature: setSignature,\n      collectCustomHooksForSignature: collectCustomHooksForSignature,\n      getFamilyByID: getFamilyByID,\n      getFamilyByType: getFamilyByType,\n      findAffectedHostInstances: findAffectedHostInstances,\n      injectIntoGlobalHook: injectIntoGlobalHook,\n      hasUnrecoverableErrors: hasUnrecoverableErrors,\n      _getMountedRootCount: _getMountedRootCount,\n      createSignatureFunctionForTransform: createSignatureFunctionForTransform,\n      isLikelyComponentType: isLikelyComponentType\n    }); // This is hacky but makes it work with both Rollup and Jest.\n\n    var runtime = ReactFreshRuntime.default || ReactFreshRuntime;\n    module.exports = runtime;\n  })();\n}","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/node_modules/react-refresh/cjs/react-refresh-runtime.development.js"],"names":["process","env","NODE_ENV","hasSymbol","Symbol","for","REACT_FORWARD_REF_TYPE","REACT_MEMO_TYPE","PossiblyWeakMap","WeakMap","Map","allFamiliesByID","allFamiliesByType","allSignaturesByType","updatedFamiliesByType","pendingUpdates","helpersByRendererID","helpersByRoot","mountedRoots","Set","failedRoots","didSomeRootFailOnMount","computeFullKey","signature","fullKey","ownKey","hooks","getCustomHooks","err","forceReset","i","length","hook","nestedHookSignature","get","undefined","nestedHookKey","haveEqualSignatures","prevType","nextType","prevSignature","nextSignature","isReactClass","type","prototype","isReactComponent","canPreserveStateBetween","resolveFamily","performReactRefresh","staleFamilies","updatedFamilies","updates","forEach","_ref","family","current","set","add","update","helpers","setRefreshHandler","didError","firstError","element","root","Error","scheduleRoot","scheduleRefresh","register","id","has","push","$$typeof","render","setSignature","key","arguments","collectCustomHooksForSignature","getFamilyByID","getFamilyByType","findAffectedHostInstances","families","affectedInstances","instancesForRoot","findHostInstancesForRefresh","inst","injectIntoGlobalHook","globalObject","__REACT_DEVTOOLS_GLOBAL_HOOK__","nextID","supportsFiber","inject","injected","onCommitFiberRoot","maybePriorityLevel","onCommitFiberUnmount","oldInject","apply","oldOnCommitFiberRoot","alternate","wasMounted","memoizedState","isMounted","delete","hasUnrecoverableErrors","_getMountedRootCount","size","createSignatureFunctionForTransform","status","savedType","hasCustomHooks","isLikelyComponentType","ownNames","Object","getOwnPropertyNames","__proto__","name","displayName","test","ReactFreshRuntime","freeze","runtime","default","module","exports"],"mappings":"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","sourcesContent":["/** @license React vundefined\n * react-refresh-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\n\n\n\n\n\n\n // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\n\n\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n\n\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n\nvar PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.\n// It's OK to reference families, but use WeakMap/Set for types.\n\nvar allFamiliesByID = new Map();\nvar allFamiliesByType = new PossiblyWeakMap();\nvar allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families\n// that have actually been edited here. This keeps checks fast.\n// $FlowIssue\n\nvar updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.\n// It is an array of [Family, NextType] tuples.\n\nvar pendingUpdates = []; // This is injected by the renderer via DevTools global hook.\n\nvar helpersByRendererID = new Map();\nvar helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.\n\nvar mountedRoots = new Set(); // If a root captures an error, we add its element to this Map so we can retry on edit.\n\nvar failedRoots = new Map();\nvar didSomeRootFailOnMount = false;\n\nfunction computeFullKey(signature) {\n  if (signature.fullKey !== null) {\n    return signature.fullKey;\n  }\n\n  var fullKey = signature.ownKey;\n  var hooks;\n\n  try {\n    hooks = signature.getCustomHooks();\n  } catch (err) {\n    // This can happen in an edge case, e.g. if expression like Foo.useSomething\n    // depends on Foo which is lazily initialized during rendering.\n    // In that case just assume we'll have to remount.\n    signature.forceReset = true;\n    signature.fullKey = fullKey;\n    return fullKey;\n  }\n\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n\n    if (typeof hook !== 'function') {\n      // Something's wrong. Assume we need to remount.\n      signature.forceReset = true;\n      signature.fullKey = fullKey;\n      return fullKey;\n    }\n\n    var nestedHookSignature = allSignaturesByType.get(hook);\n\n    if (nestedHookSignature === undefined) {\n      // No signature means Hook wasn't in the source code, e.g. in a library.\n      // We'll skip it because we can assume it won't change during this session.\n      continue;\n    }\n\n    var nestedHookKey = computeFullKey(nestedHookSignature);\n\n    if (nestedHookSignature.forceReset) {\n      signature.forceReset = true;\n    }\n\n    fullKey += '\\n---\\n' + nestedHookKey;\n  }\n\n  signature.fullKey = fullKey;\n  return fullKey;\n}\n\nfunction haveEqualSignatures(prevType, nextType) {\n  var prevSignature = allSignaturesByType.get(prevType);\n  var nextSignature = allSignaturesByType.get(nextType);\n\n  if (prevSignature === undefined && nextSignature === undefined) {\n    return true;\n  }\n\n  if (prevSignature === undefined || nextSignature === undefined) {\n    return false;\n  }\n\n  if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {\n    return false;\n  }\n\n  if (nextSignature.forceReset) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isReactClass(type) {\n  return type.prototype && type.prototype.isReactComponent;\n}\n\nfunction canPreserveStateBetween(prevType, nextType) {\n  if (isReactClass(prevType) || isReactClass(nextType)) {\n    return false;\n  }\n\n  if (haveEqualSignatures(prevType, nextType)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction resolveFamily(type) {\n  // Only check updated types to keep lookups fast.\n  return updatedFamiliesByType.get(type);\n}\n\nfunction performReactRefresh() {\n  {\n    if (pendingUpdates.length === 0) {\n      return null;\n    }\n\n    var staleFamilies = new Set();\n    var updatedFamilies = new Set();\n    var updates = pendingUpdates;\n    pendingUpdates = [];\n    updates.forEach(function (_ref) {\n      var family = _ref[0],\n          nextType = _ref[1];\n      // Now that we got a real edit, we can create associations\n      // that will be read by the React reconciler.\n      var prevType = family.current;\n      updatedFamiliesByType.set(prevType, family);\n      updatedFamiliesByType.set(nextType, family);\n      family.current = nextType; // Determine whether this should be a re-render or a re-mount.\n\n      if (canPreserveStateBetween(prevType, nextType)) {\n        updatedFamilies.add(family);\n      } else {\n        staleFamilies.add(family);\n      }\n    }); // TODO: rename these fields to something more meaningful.\n\n    var update = {\n      updatedFamilies: updatedFamilies,\n      // Families that will re-render preserving state\n      staleFamilies: staleFamilies // Families that will be remounted\n\n    };\n    helpersByRendererID.forEach(function (helpers) {\n      // Even if there are no roots, set the handler on first update.\n      // This ensures that if *new* roots are mounted, they'll use the resolve handler.\n      helpers.setRefreshHandler(resolveFamily);\n    });\n    var didError = false;\n    var firstError = null;\n    failedRoots.forEach(function (element, root) {\n      var helpers = helpersByRoot.get(root);\n\n      if (helpers === undefined) {\n        throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n      }\n\n      try {\n        helpers.scheduleRoot(root, element);\n      } catch (err) {\n        if (!didError) {\n          didError = true;\n          firstError = err;\n        } // Keep trying other roots.\n\n      }\n    });\n    mountedRoots.forEach(function (root) {\n      var helpers = helpersByRoot.get(root);\n\n      if (helpers === undefined) {\n        throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n      }\n\n      try {\n        helpers.scheduleRefresh(root, update);\n      } catch (err) {\n        if (!didError) {\n          didError = true;\n          firstError = err;\n        } // Keep trying other roots.\n\n      }\n    });\n\n    if (didError) {\n      throw firstError;\n    }\n\n    return update;\n  }\n}\nfunction register(type, id) {\n  {\n    if (type === null) {\n      return;\n    }\n\n    if (typeof type !== 'function' && typeof type !== 'object') {\n      return;\n    } // This can happen in an edge case, e.g. if we register\n    // return value of a HOC but it returns a cached component.\n    // Ignore anything but the first registration for each type.\n\n\n    if (allFamiliesByType.has(type)) {\n      return;\n    } // Create family or remember to update it.\n    // None of this bookkeeping affects reconciliation\n    // until the first performReactRefresh() call above.\n\n\n    var family = allFamiliesByID.get(id);\n\n    if (family === undefined) {\n      family = {\n        current: type\n      };\n      allFamiliesByID.set(id, family);\n    } else {\n      pendingUpdates.push([family, type]);\n    }\n\n    allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.\n\n    if (typeof type === 'object' && type !== null) {\n      switch (type.$$typeof) {\n        case REACT_FORWARD_REF_TYPE:\n          register(type.render, id + '$render');\n          break;\n\n        case REACT_MEMO_TYPE:\n          register(type.type, id + '$type');\n          break;\n      }\n    }\n  }\n}\nfunction setSignature(type, key) {\n  var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;\n\n  {\n    allSignaturesByType.set(type, {\n      forceReset: forceReset,\n      ownKey: key,\n      fullKey: null,\n      getCustomHooks: getCustomHooks || function () {\n        return [];\n      }\n    });\n  }\n} // This is lazily called during first render for a type.\n// It captures Hook list at that time so inline requires don't break comparisons.\n\nfunction collectCustomHooksForSignature(type) {\n  {\n    var signature = allSignaturesByType.get(type);\n\n    if (signature !== undefined) {\n      computeFullKey(signature);\n    }\n  }\n}\nfunction getFamilyByID(id) {\n  {\n    return allFamiliesByID.get(id);\n  }\n}\nfunction getFamilyByType(type) {\n  {\n    return allFamiliesByType.get(type);\n  }\n}\nfunction findAffectedHostInstances(families) {\n  {\n    var affectedInstances = new Set();\n    mountedRoots.forEach(function (root) {\n      var helpers = helpersByRoot.get(root);\n\n      if (helpers === undefined) {\n        throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n      }\n\n      var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);\n      instancesForRoot.forEach(function (inst) {\n        affectedInstances.add(inst);\n      });\n    });\n    return affectedInstances;\n  }\n}\nfunction injectIntoGlobalHook(globalObject) {\n  {\n    // For React Native, the global hook will be set up by require('react-devtools-core').\n    // That code will run before us. So we need to monkeypatch functions on existing hook.\n    // For React Web, the global hook will be set up by the extension.\n    // This will also run before us.\n    var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n    if (hook === undefined) {\n      // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.\n      // Note that in this case it's important that renderer code runs *after* this method call.\n      // Otherwise, the renderer will think that there is no global hook, and won't do the injection.\n      var nextID = 0;\n      globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {\n        supportsFiber: true,\n        inject: function (injected) {\n          return nextID++;\n        },\n        onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},\n        onCommitFiberUnmount: function () {}\n      };\n    } // Here, we just want to get a reference to scheduleRefresh.\n\n\n    var oldInject = hook.inject;\n\n    hook.inject = function (injected) {\n      var id = oldInject.apply(this, arguments);\n\n      if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {\n        // This version supports React Refresh.\n        helpersByRendererID.set(id, injected);\n      }\n\n      return id;\n    }; // We also want to track currently mounted roots.\n\n\n    var oldOnCommitFiberRoot = hook.onCommitFiberRoot;\n\n    hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {\n      var helpers = helpersByRendererID.get(id);\n\n      if (helpers === undefined) {\n        return;\n      }\n\n      helpersByRoot.set(root, helpers);\n      var current = root.current;\n      var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.\n      // This logic is copy-pasted from similar logic in the DevTools backend.\n      // If this breaks with some refactoring, you'll want to update DevTools too.\n\n      if (alternate !== null) {\n        var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;\n        var isMounted = current.memoizedState != null && current.memoizedState.element != null;\n\n        if (!wasMounted && isMounted) {\n          // Mount a new root.\n          mountedRoots.add(root);\n          failedRoots.delete(root);\n        } else if (wasMounted && isMounted) {// Update an existing root.\n          // This doesn't affect our mounted root Set.\n        } else if (wasMounted && !isMounted) {\n          // Unmount an existing root.\n          mountedRoots.delete(root);\n\n          if (didError) {\n            // We'll remount it on future edits.\n            // Remember what was rendered so we can restore it.\n            failedRoots.set(root, alternate.memoizedState.element);\n          } else {\n            helpersByRoot.delete(root);\n          }\n        } else if (!wasMounted && !isMounted) {\n          if (didError && !failedRoots.has(root)) {\n            // The root had an error during the initial mount.\n            // We can't read its last element from the memoized state\n            // because there was no previously committed alternate.\n            // Ideally, it would be nice if we had a way to extract\n            // the last attempted rendered element, but accessing the update queue\n            // would tie this package too closely to the reconciler version.\n            // So instead, we just set a flag.\n            // TODO: Maybe we could fix this as the same time as when we fix\n            // DevTools to not depend on `alternate.memoizedState.element`.\n            didSomeRootFailOnMount = true;\n          }\n        }\n      } else {\n        // Mount a new root.\n        mountedRoots.add(root);\n      }\n\n      return oldOnCommitFiberRoot.apply(this, arguments);\n    };\n  }\n}\nfunction hasUnrecoverableErrors() {\n  return didSomeRootFailOnMount;\n} // Exposed for testing.\n\nfunction _getMountedRootCount() {\n  {\n    return mountedRoots.size;\n  }\n} // This is a wrapper over more primitive functions for setting signature.\n// Signatures let us decide whether the Hook order has changed on refresh.\n//\n// This function is intended to be used as a transform target, e.g.:\n// var _s = createSignatureFunctionForTransform()\n//\n// function Hello() {\n//   const [foo, setFoo] = useState(0);\n//   const value = useCustomHook();\n//   _s(); /* Second call triggers collecting the custom Hook list.\n//          * This doesn't happen during the module evaluation because we\n//          * don't want to change the module order with inline requires.\n//          * Next calls are noops. */\n//   return <h1>Hi</h1>;\n// }\n//\n// /* First call specifies the signature: */\n// _s(\n//   Hello,\n//   'useState{[foo, setFoo]}(0)',\n//   () => [useCustomHook], /* Lazy to avoid triggering inline requires */\n// );\n\nfunction createSignatureFunctionForTransform() {\n  {\n    // We'll fill in the signature in two steps.\n    // First, we'll know the signature itself. This happens outside the component.\n    // Then, we'll know the references to custom Hooks. This happens inside the component.\n    // After that, the returned function will be a fast path no-op.\n    var status = 'needsSignature';\n    var savedType;\n    var hasCustomHooks;\n    return function (type, key, forceReset, getCustomHooks) {\n      switch (status) {\n        case 'needsSignature':\n          if (type !== undefined) {\n            // If we received an argument, this is the initial registration call.\n            savedType = type;\n            hasCustomHooks = typeof getCustomHooks === 'function';\n            setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.\n\n            status = 'needsCustomHooks';\n          }\n\n          break;\n\n        case 'needsCustomHooks':\n          if (hasCustomHooks) {\n            collectCustomHooksForSignature(savedType);\n          }\n\n          status = 'resolved';\n          break;\n\n        case 'resolved':\n          // Do nothing. Fast path for all future renders.\n          break;\n      }\n\n      return type;\n    };\n  }\n}\nfunction isLikelyComponentType(type) {\n  {\n    switch (typeof type) {\n      case 'function':\n        {\n          // First, deal with classes.\n          if (type.prototype != null) {\n            if (type.prototype.isReactComponent) {\n              // React class.\n              return true;\n            }\n\n            var ownNames = Object.getOwnPropertyNames(type.prototype);\n\n            if (ownNames.length > 1 || ownNames[0] !== 'constructor') {\n              // This looks like a class.\n              return false;\n            } // eslint-disable-next-line no-proto\n\n\n            if (type.prototype.__proto__ !== Object.prototype) {\n              // It has a superclass.\n              return false;\n            } // Pass through.\n            // This looks like a regular function with empty prototype.\n\n          } // For plain functions and arrows, use name as a heuristic.\n\n\n          var name = type.name || type.displayName;\n          return typeof name === 'string' && /^[A-Z]/.test(name);\n        }\n\n      case 'object':\n        {\n          if (type != null) {\n            switch (type.$$typeof) {\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_MEMO_TYPE:\n                // Definitely React components.\n                return true;\n\n              default:\n                return false;\n            }\n          }\n\n          return false;\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  }\n}\n\nvar ReactFreshRuntime = Object.freeze({\n\tperformReactRefresh: performReactRefresh,\n\tregister: register,\n\tsetSignature: setSignature,\n\tcollectCustomHooksForSignature: collectCustomHooksForSignature,\n\tgetFamilyByID: getFamilyByID,\n\tgetFamilyByType: getFamilyByType,\n\tfindAffectedHostInstances: findAffectedHostInstances,\n\tinjectIntoGlobalHook: injectIntoGlobalHook,\n\thasUnrecoverableErrors: hasUnrecoverableErrors,\n\t_getMountedRootCount: _getMountedRootCount,\n\tcreateSignatureFunctionForTransform: createSignatureFunctionForTransform,\n\tisLikelyComponentType: isLikelyComponentType\n});\n\n// This is hacky but makes it work with both Rollup and Jest.\n\n\nvar runtime = ReactFreshRuntime.default || ReactFreshRuntime;\n\nmodule.exports = runtime;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}