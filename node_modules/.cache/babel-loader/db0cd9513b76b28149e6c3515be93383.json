{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel';\nimport Chart from '../D3/Chart/Chart';\nimport { NewContext } from './index';\nimport './hook.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Receiver = ({\n  payload,\n  publish\n}) => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(NewContext);\n  const [init, setInit] = useState(false);\n  const [messages, setMessages] = useState([]); // \"monitors\" is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n  // This maps have two keys -> \"id\" is the name of the var we want to track and \"values\" are a list of maps, each one of them containing two keys -> time (x axis) and a value (y axis) associated to this time. \n  // When component is created, \"monitors\" is an empty Array, but it will be populated with the mqtt messagges.\n  // const monitors = [\n  // \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n  // \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n  // ];\n\n  const [monitors, setMonitors] = useState([]);\n  const [monitors2, setMonitors2] = useState({});\n  useEffect(() => {\n    if (state.setupClicked) {\n      setMonitors([]);\n      setMonitors2({});\n      dispatch({\n        type: 'unSetup'\n      });\n    }\n  }, [state]); // At the moment, two posible topics:\n  // - from_server/panel_info\n  // - from_server/update\n\n  const topicOption = {\n    'from_server/panel_info': jsonObj => {\n      for (const [k, v] of Object.entries(jsonObj)) {\n        if (k !== 'Monitor') {\n          createWindow(v, publish);\n        }\n      }\n    },\n    'from_server/update': jsonObj => {\n      if (Object.keys(monitors2).length === 0) {\n        setInit(true);\n\n        for (const [k, v] of Object.entries(jsonObj)) {\n          monitors2[k] = [{\n            time: 0,\n            value: v\n          }];\n        }\n      } else {\n        for (const [k, v] of Object.entries(jsonObj)) {\n          const targetVar = monitors2[k];\n          const lastElement = targetVar[targetVar.length - 1];\n          const newTime = lastElement.time + 1;\n          const newInput = {\n            time: newTime,\n            value: v\n          };\n          targetVar.push(newInput);\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    if (payload.topic) {\n      const jsonObject = JSON.parse(payload.message);\n      setMessages(messages => [...messages, payload]);\n      topicOption[payload.topic](jsonObject);\n    }\n  }, [payload]);\n\n  const renderListItem = item => /*#__PURE__*/_jsxDEV(List.Item, {\n    children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n      title: item.topic,\n      description: item.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"Receiver\",\n    children: init && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"allMonitorsDiv\",\n      children: Object.keys(monitors2).map(function (key) {\n        const newMonitor = [{\n          id: key,\n          values: monitors2[key]\n        }];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monitorDiv\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Chart, {\n            data: newMonitor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 53\n          }, this), \" \"]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 14\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Receiver, \"fgNnCTd+umi9ze5h4cEIs7sjSHA=\");\n\n_c = Receiver;\nexport default Receiver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js"],"names":["React","useEffect","useState","useContext","Card","List","createWindow","Chart","NewContext","Receiver","payload","publish","state","dispatch","init","setInit","messages","setMessages","monitors","setMonitors","monitors2","setMonitors2","setupClicked","type","topicOption","jsonObj","k","v","Object","entries","keys","length","time","value","targetVar","lastElement","newTime","newInput","push","topic","jsonObject","JSON","parse","message","renderListItem","item","map","key","newMonitor","id","values"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel'\nimport Chart from '../D3/Chart/Chart'\nimport { NewContext } from './index'\n\nimport './hook.css'\n\nconst Receiver = ({ payload, publish }) => {\n\tconst {state, dispatch} \t  = useContext(NewContext);\n\tconst [init, setInit]         = useState(false);\n\tconst [messages, setMessages] = useState([]);\n\n\t// \"monitors\" is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n\t// This maps have two keys -> \"id\" is the name of the var we want to track and \"values\" are a list of maps, each one of them containing two keys -> time (x axis) and a value (y axis) associated to this time. \n\t// When component is created, \"monitors\" is an empty Array, but it will be populated with the mqtt messagges.\n\n\t// const monitors = [\n\t// \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n\t// \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n\t// ];\n\tconst [monitors, setMonitors] = useState([]);\n\tconst [monitors2, setMonitors2] = useState({});\n\n\tuseEffect( () => {\n\t\tif (state.setupClicked) {\n\t\t\tsetMonitors([]);\n\t\t\tsetMonitors2({});\n\t\t\tdispatch({type: 'unSetup'});\n\t\t}\n\t}, [state]);\n\n\t// At the moment, two posible topics:\n\t// - from_server/panel_info\n\t// - from_server/update\n\tconst topicOption = {\n\n\t\t'from_server/panel_info': (jsonObj) => {\n\t\t\tfor (const [k,v] of Object.entries(jsonObj) ) {\n\t\t\t\tif (k !== 'Monitor') {\n\t\t\t\t\tcreateWindow(v, publish)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t'from_server/update': (jsonObj) => {\n\t\t\tif (Object.keys(monitors2).length === 0) {\n\t\t\t\tsetInit(true)\n\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObj) ) {\n\t\t\t\t\tmonitors2[k] = [{time: 0, value:v}];\n\t\t\t\t}\n\n\t\t\t}else{\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObj) ) {\n\n\t\t\t\t\tconst targetVar \t= monitors2[k];\n\n\t\t\t\t\tconst lastElement  \t= targetVar[targetVar.length -1];\n\t\t\t\t\tconst newTime  \t\t= lastElement.time + 1;\n\t\t\t\t\tconst newInput\t\t= {time: newTime, value:v};\n\t\t\t\t\ttargetVar.push(newInput)\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t},\n\n\t}\n\n\tuseEffect(() => {\n\t\tif (payload.topic) {\n\t\t\tconst jsonObject = JSON.parse(payload.message);\n\t\t\tsetMessages(messages => [...messages, payload]);\n\n\t\t\ttopicOption[payload.topic](jsonObject);\n\t\t}\n\t}, [payload]);\n\n\tconst renderListItem = (item) => (\n\t\t<List.Item>\n\t\t\t<List.Item.Meta\n\t\t\t\ttitle={item.topic}\n\t\t\t\tdescription={item.message}\n\t\t\t/>\n\t\t</List.Item>\n\t);\n\n\treturn (\n\t\t<Card title=\"Receiver\">\n\t\t\t{/* When Uncommented, incoming MQTT messages are displayed */}\n\t\t\t{/* <List\n\t\t\t\tsize=\"small\"\n\t\t\t\tbordered\n\t\t\t\tdataSource={messages}\n\t\t\t\t// renderItem={renderListItem}\n\t\t\t\tstyle={{maxHeight:'15em' ,overflow:'scroll'}}\n\t\t\t/> */}\n\t\t\t{ init && \n\t\t\t\t<div id='allMonitorsDiv'>\n\t\t\t\t\t{Object.keys(monitors2).map(function(key) {\n\t\t\t\t\t\tconst newMonitor = [{id:key, values:monitors2[key]}]\n\t\t\t\t\t\treturn <div key={key} className='monitorDiv'> <Chart data={newMonitor} /> </div>;\n\t\t\t\t  \t})}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{/* { init && \n\t\t\t\t<div id='allMonitorsDiv'>\n\t\t\t\t\t{monitors.map(function(item) {\n\t\t\t\t\t\tconst newMonitor = [item]\n\t\t\t\t\t\treturn <div key={item.id} class='monitorDiv'> <Chart data={newMonitor} /> </div>;\n\t\t\t\t  \t})}\n\t\t\t\t</div>\n\t\t\t} */}\n\t\t\t\n\t\t</Card>\n\t);\n}\n\nexport default Receiver;\n"]},"metadata":{},"sourceType":"module"}