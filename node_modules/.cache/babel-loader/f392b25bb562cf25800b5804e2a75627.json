{"ast":null,"code":"/* Protocol - protocol constants */\nvar protocol = module.exports;\n/* Command code => mnemonic */\n\nprotocol.types = {\n  0: 'reserved',\n  1: 'connect',\n  2: 'connack',\n  3: 'publish',\n  4: 'puback',\n  5: 'pubrec',\n  6: 'pubrel',\n  7: 'pubcomp',\n  8: 'subscribe',\n  9: 'suback',\n  10: 'unsubscribe',\n  11: 'unsuback',\n  12: 'pingreq',\n  13: 'pingresp',\n  14: 'disconnect',\n  15: 'auth'\n};\n/* Mnemonic => Command code */\n\nprotocol.codes = {};\n\nfor (var k in protocol.types) {\n  var v = protocol.types[k];\n  protocol.codes[v] = k;\n}\n/* Header */\n\n\nprotocol.CMD_SHIFT = 4;\nprotocol.CMD_MASK = 0xF0;\nprotocol.DUP_MASK = 0x08;\nprotocol.QOS_MASK = 0x03;\nprotocol.QOS_SHIFT = 1;\nprotocol.RETAIN_MASK = 0x01;\n/* Length */\n\nprotocol.VARBYTEINT_MASK = 0x7F;\nprotocol.VARBYTEINT_FIN_MASK = 0x80;\nprotocol.VARBYTEINT_MAX = 268435455;\n/* Connack */\n\nprotocol.SESSIONPRESENT_MASK = 0x01;\nprotocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK]);\nprotocol.CONNACK_HEADER = Buffer.from([protocol.codes.connack << protocol.CMD_SHIFT]);\n/* Connect */\n\nprotocol.USERNAME_MASK = 0x80;\nprotocol.PASSWORD_MASK = 0x40;\nprotocol.WILL_RETAIN_MASK = 0x20;\nprotocol.WILL_QOS_MASK = 0x18;\nprotocol.WILL_QOS_SHIFT = 3;\nprotocol.WILL_FLAG_MASK = 0x04;\nprotocol.CLEAN_SESSION_MASK = 0x02;\nprotocol.CONNECT_HEADER = Buffer.from([protocol.codes.connect << protocol.CMD_SHIFT]);\n/* Properties */\n\nprotocol.properties = {\n  sessionExpiryInterval: 17,\n  willDelayInterval: 24,\n  receiveMaximum: 33,\n  maximumPacketSize: 39,\n  topicAliasMaximum: 34,\n  requestResponseInformation: 25,\n  requestProblemInformation: 23,\n  userProperties: 38,\n  authenticationMethod: 21,\n  authenticationData: 22,\n  payloadFormatIndicator: 1,\n  messageExpiryInterval: 2,\n  contentType: 3,\n  responseTopic: 8,\n  correlationData: 9,\n  maximumQoS: 36,\n  retainAvailable: 37,\n  assignedClientIdentifier: 18,\n  reasonString: 31,\n  wildcardSubscriptionAvailable: 40,\n  subscriptionIdentifiersAvailable: 41,\n  sharedSubscriptionAvailable: 42,\n  serverKeepAlive: 19,\n  responseInformation: 26,\n  serverReference: 28,\n  topicAlias: 35,\n  subscriptionIdentifier: 11\n};\nprotocol.propertiesCodes = {};\n\nfor (var prop in protocol.properties) {\n  var id = protocol.properties[prop];\n  protocol.propertiesCodes[id] = prop;\n}\n\nprotocol.propertiesTypes = {\n  sessionExpiryInterval: 'int32',\n  willDelayInterval: 'int32',\n  receiveMaximum: 'int16',\n  maximumPacketSize: 'int32',\n  topicAliasMaximum: 'int16',\n  requestResponseInformation: 'byte',\n  requestProblemInformation: 'byte',\n  userProperties: 'pair',\n  authenticationMethod: 'string',\n  authenticationData: 'binary',\n  payloadFormatIndicator: 'byte',\n  messageExpiryInterval: 'int32',\n  contentType: 'string',\n  responseTopic: 'string',\n  correlationData: 'binary',\n  maximumQoS: 'int8',\n  retainAvailable: 'byte',\n  assignedClientIdentifier: 'string',\n  reasonString: 'string',\n  wildcardSubscriptionAvailable: 'byte',\n  subscriptionIdentifiersAvailable: 'byte',\n  sharedSubscriptionAvailable: 'byte',\n  serverKeepAlive: 'int16',\n  responseInformation: 'string',\n  serverReference: 'string',\n  topicAlias: 'int16',\n  subscriptionIdentifier: 'var'\n};\n\nfunction genHeader(type) {\n  return [0, 1, 2].map(function (qos) {\n    return [0, 1].map(function (dup) {\n      return [0, 1].map(function (retain) {\n        var buf = Buffer.alloc(1);\n        buf.writeUInt8(protocol.codes[type] << protocol.CMD_SHIFT | (dup ? protocol.DUP_MASK : 0) | qos << protocol.QOS_SHIFT | retain, 0, true);\n        return buf;\n      });\n    });\n  });\n}\n/* Publish */\n\n\nprotocol.PUBLISH_HEADER = genHeader('publish');\n/* Subscribe */\n\nprotocol.SUBSCRIBE_HEADER = genHeader('subscribe');\nprotocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;\nprotocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;\nprotocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;\nprotocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;\nprotocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;\nprotocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;\nprotocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;\nprotocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20];\nprotocol.SUBSCRIBE_OPTIONS_NL = 0x04;\nprotocol.SUBSCRIBE_OPTIONS_RAP = 0x08;\nprotocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02];\n/* Unsubscribe */\n\nprotocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe');\n/* Confirmations */\n\nprotocol.ACKS = {\n  unsuback: genHeader('unsuback'),\n  puback: genHeader('puback'),\n  pubcomp: genHeader('pubcomp'),\n  pubrel: genHeader('pubrel'),\n  pubrec: genHeader('pubrec')\n};\nprotocol.SUBACK_HEADER = Buffer.from([protocol.codes.suback << protocol.CMD_SHIFT]);\n/* Protocol versions */\n\nprotocol.VERSION3 = Buffer.from([3]);\nprotocol.VERSION4 = Buffer.from([4]);\nprotocol.VERSION5 = Buffer.from([5]);\nprotocol.VERSION131 = Buffer.from([131]);\nprotocol.VERSION132 = Buffer.from([132]);\n/* QoS */\n\nprotocol.QOS = [0, 1, 2].map(function (qos) {\n  return Buffer.from([qos]);\n});\n/* Empty packets */\n\nprotocol.EMPTY = {\n  pingreq: Buffer.from([protocol.codes.pingreq << 4, 0]),\n  pingresp: Buffer.from([protocol.codes.pingresp << 4, 0]),\n  disconnect: Buffer.from([protocol.codes.disconnect << 4, 0])\n};","map":{"version":3,"sources":["/home/one/node_modules/mqtt-packet/constants.js"],"names":["protocol","module","exports","types","codes","k","v","CMD_SHIFT","CMD_MASK","DUP_MASK","QOS_MASK","QOS_SHIFT","RETAIN_MASK","VARBYTEINT_MASK","VARBYTEINT_FIN_MASK","VARBYTEINT_MAX","SESSIONPRESENT_MASK","SESSIONPRESENT_HEADER","Buffer","from","CONNACK_HEADER","connack","USERNAME_MASK","PASSWORD_MASK","WILL_RETAIN_MASK","WILL_QOS_MASK","WILL_QOS_SHIFT","WILL_FLAG_MASK","CLEAN_SESSION_MASK","CONNECT_HEADER","connect","properties","sessionExpiryInterval","willDelayInterval","receiveMaximum","maximumPacketSize","topicAliasMaximum","requestResponseInformation","requestProblemInformation","userProperties","authenticationMethod","authenticationData","payloadFormatIndicator","messageExpiryInterval","contentType","responseTopic","correlationData","maximumQoS","retainAvailable","assignedClientIdentifier","reasonString","wildcardSubscriptionAvailable","subscriptionIdentifiersAvailable","sharedSubscriptionAvailable","serverKeepAlive","responseInformation","serverReference","topicAlias","subscriptionIdentifier","propertiesCodes","prop","id","propertiesTypes","genHeader","type","map","qos","dup","retain","buf","alloc","writeUInt8","PUBLISH_HEADER","SUBSCRIBE_HEADER","SUBSCRIBE_OPTIONS_QOS_MASK","SUBSCRIBE_OPTIONS_NL_MASK","SUBSCRIBE_OPTIONS_NL_SHIFT","SUBSCRIBE_OPTIONS_RAP_MASK","SUBSCRIBE_OPTIONS_RAP_SHIFT","SUBSCRIBE_OPTIONS_RH_MASK","SUBSCRIBE_OPTIONS_RH_SHIFT","SUBSCRIBE_OPTIONS_RH","SUBSCRIBE_OPTIONS_NL","SUBSCRIBE_OPTIONS_RAP","SUBSCRIBE_OPTIONS_QOS","UNSUBSCRIBE_HEADER","ACKS","unsuback","puback","pubcomp","pubrel","pubrec","SUBACK_HEADER","suback","VERSION3","VERSION4","VERSION5","VERSION131","VERSION132","QOS","EMPTY","pingreq","pingresp","disconnect"],"mappings":"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","sourcesContent":["/* Protocol - protocol constants */\nconst protocol = module.exports\n\n/* Command code => mnemonic */\nprotocol.types = {\n  0: 'reserved',\n  1: 'connect',\n  2: 'connack',\n  3: 'publish',\n  4: 'puback',\n  5: 'pubrec',\n  6: 'pubrel',\n  7: 'pubcomp',\n  8: 'subscribe',\n  9: 'suback',\n  10: 'unsubscribe',\n  11: 'unsuback',\n  12: 'pingreq',\n  13: 'pingresp',\n  14: 'disconnect',\n  15: 'auth'\n}\n\n/* Mnemonic => Command code */\nprotocol.codes = {}\nfor (const k in protocol.types) {\n  const v = protocol.types[k]\n  protocol.codes[v] = k\n}\n\n/* Header */\nprotocol.CMD_SHIFT = 4\nprotocol.CMD_MASK = 0xF0\nprotocol.DUP_MASK = 0x08\nprotocol.QOS_MASK = 0x03\nprotocol.QOS_SHIFT = 1\nprotocol.RETAIN_MASK = 0x01\n\n/* Length */\nprotocol.VARBYTEINT_MASK = 0x7F\nprotocol.VARBYTEINT_FIN_MASK = 0x80\nprotocol.VARBYTEINT_MAX = 268435455\n\n/* Connack */\nprotocol.SESSIONPRESENT_MASK = 0x01\nprotocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK])\nprotocol.CONNACK_HEADER = Buffer.from([protocol.codes.connack << protocol.CMD_SHIFT])\n\n/* Connect */\nprotocol.USERNAME_MASK = 0x80\nprotocol.PASSWORD_MASK = 0x40\nprotocol.WILL_RETAIN_MASK = 0x20\nprotocol.WILL_QOS_MASK = 0x18\nprotocol.WILL_QOS_SHIFT = 3\nprotocol.WILL_FLAG_MASK = 0x04\nprotocol.CLEAN_SESSION_MASK = 0x02\nprotocol.CONNECT_HEADER = Buffer.from([protocol.codes.connect << protocol.CMD_SHIFT])\n\n/* Properties */\nprotocol.properties = {\n  sessionExpiryInterval: 17,\n  willDelayInterval: 24,\n  receiveMaximum: 33,\n  maximumPacketSize: 39,\n  topicAliasMaximum: 34,\n  requestResponseInformation: 25,\n  requestProblemInformation: 23,\n  userProperties: 38,\n  authenticationMethod: 21,\n  authenticationData: 22,\n  payloadFormatIndicator: 1,\n  messageExpiryInterval: 2,\n  contentType: 3,\n  responseTopic: 8,\n  correlationData: 9,\n  maximumQoS: 36,\n  retainAvailable: 37,\n  assignedClientIdentifier: 18,\n  reasonString: 31,\n  wildcardSubscriptionAvailable: 40,\n  subscriptionIdentifiersAvailable: 41,\n  sharedSubscriptionAvailable: 42,\n  serverKeepAlive: 19,\n  responseInformation: 26,\n  serverReference: 28,\n  topicAlias: 35,\n  subscriptionIdentifier: 11\n}\nprotocol.propertiesCodes = {}\nfor (const prop in protocol.properties) {\n  const id = protocol.properties[prop]\n  protocol.propertiesCodes[id] = prop\n}\nprotocol.propertiesTypes = {\n  sessionExpiryInterval: 'int32',\n  willDelayInterval: 'int32',\n  receiveMaximum: 'int16',\n  maximumPacketSize: 'int32',\n  topicAliasMaximum: 'int16',\n  requestResponseInformation: 'byte',\n  requestProblemInformation: 'byte',\n  userProperties: 'pair',\n  authenticationMethod: 'string',\n  authenticationData: 'binary',\n  payloadFormatIndicator: 'byte',\n  messageExpiryInterval: 'int32',\n  contentType: 'string',\n  responseTopic: 'string',\n  correlationData: 'binary',\n  maximumQoS: 'int8',\n  retainAvailable: 'byte',\n  assignedClientIdentifier: 'string',\n  reasonString: 'string',\n  wildcardSubscriptionAvailable: 'byte',\n  subscriptionIdentifiersAvailable: 'byte',\n  sharedSubscriptionAvailable: 'byte',\n  serverKeepAlive: 'int16',\n  responseInformation: 'string',\n  serverReference: 'string',\n  topicAlias: 'int16',\n  subscriptionIdentifier: 'var'\n}\n\nfunction genHeader (type) {\n  return [0, 1, 2].map(qos => {\n    return [0, 1].map(dup => {\n      return [0, 1].map(retain => {\n        const buf = Buffer.alloc(1)\n        buf.writeUInt8(\n          protocol.codes[type] << protocol.CMD_SHIFT |\n          (dup ? protocol.DUP_MASK : 0) |\n          qos << protocol.QOS_SHIFT | retain, 0, true)\n        return buf\n      })\n    })\n  })\n}\n\n/* Publish */\nprotocol.PUBLISH_HEADER = genHeader('publish')\n\n/* Subscribe */\nprotocol.SUBSCRIBE_HEADER = genHeader('subscribe')\nprotocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03\nprotocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01\nprotocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2\nprotocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01\nprotocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3\nprotocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03\nprotocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4\nprotocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20]\nprotocol.SUBSCRIBE_OPTIONS_NL = 0x04\nprotocol.SUBSCRIBE_OPTIONS_RAP = 0x08\nprotocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02]\n\n/* Unsubscribe */\nprotocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe')\n\n/* Confirmations */\nprotocol.ACKS = {\n  unsuback: genHeader('unsuback'),\n  puback: genHeader('puback'),\n  pubcomp: genHeader('pubcomp'),\n  pubrel: genHeader('pubrel'),\n  pubrec: genHeader('pubrec')\n}\n\nprotocol.SUBACK_HEADER = Buffer.from([protocol.codes.suback << protocol.CMD_SHIFT])\n\n/* Protocol versions */\nprotocol.VERSION3 = Buffer.from([3])\nprotocol.VERSION4 = Buffer.from([4])\nprotocol.VERSION5 = Buffer.from([5])\nprotocol.VERSION131 = Buffer.from([131])\nprotocol.VERSION132 = Buffer.from([132])\n\n/* QoS */\nprotocol.QOS = [0, 1, 2].map(qos => {\n  return Buffer.from([qos])\n})\n\n/* Empty packets */\nprotocol.EMPTY = {\n  pingreq: Buffer.from([protocol.codes.pingreq << 4, 0]),\n  pingresp: Buffer.from([protocol.codes.pingresp << 4, 0]),\n  disconnect: Buffer.from([protocol.codes.disconnect << 4, 0])\n}\n"]},"metadata":{},"sourceType":"script"}