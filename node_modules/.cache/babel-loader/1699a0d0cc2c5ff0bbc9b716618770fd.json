{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/D3/Prueba.js\";\nimport React from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { arc as d3Arc, pie as d3Pie } from 'd3-shape';\nimport { csvParse } from 'd3-dsv'; // Same as data.csv\n\nimport dataCsv from './data'; // import './chart.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960,\n      height = 500,\n      radius = Math.min(width, height) / 2;\nconst color = scaleOrdinal().range(['#98abc5', '#8a89a6', '#7b6888', '#6b486b', '#a05d56', '#d0743c', '#ff8c00']);\nconst arc = d3Arc().outerRadius(radius - 10).innerRadius(radius - 70);\nconst pie = d3Pie().sort(null).value(function (d) {\n  return d.population;\n});\nconst data = pie(csvParse(dataCsv, d => {\n  d.population = +d.population;\n  return d;\n})); // <DonutChart/>\n\nexport default (() => {\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${width / 2}, ${height / 2})`,\n      children: data.map(d => /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"arc\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: arc(d),\n          fill: color(d.data.age)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          transform: `translate(${arc.centroid(d)})`,\n          dy: \".35em\",\n          children: d.data.age\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, `a${d.data.age}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/D3/Prueba.js"],"names":["React","scaleOrdinal","arc","d3Arc","pie","d3Pie","csvParse","dataCsv","width","height","radius","Math","min","color","range","outerRadius","innerRadius","sort","value","d","population","data","map","age","centroid"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,GAAG,IAAIC,KAAhB,EAAuBC,GAAG,IAAIC,KAA9B,QAA2C,UAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,QAApB,C,CAGA;;;AAIA,MAAMC,KAAK,GAAG,GAAd;AAAA,MACEC,MAAM,GAAG,GADX;AAAA,MAEEC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,EAAgBC,MAAhB,IAA0B,CAFrC;AAIA,MAAMI,KAAK,GAAGZ,YAAY,GAAGa,KAAf,CAAqB,CACjC,SADiC,EAEjC,SAFiC,EAGjC,SAHiC,EAIjC,SAJiC,EAKjC,SALiC,EAMjC,SANiC,EAOjC,SAPiC,CAArB,CAAd;AAUA,MAAMZ,GAAG,GAAGC,KAAK,GACdY,WADS,CACGL,MAAM,GAAG,EADZ,EAETM,WAFS,CAEGN,MAAM,GAAG,EAFZ,CAAZ;AAIA,MAAMN,GAAG,GAAGC,KAAK,GACdY,IADS,CACJ,IADI,EAETC,KAFS,CAEH,UAASC,CAAT,EAAY;AACjB,SAAOA,CAAC,CAACC,UAAT;AACD,CAJS,CAAZ;AAMA,MAAMC,IAAI,GAAGjB,GAAG,CACdE,QAAQ,CAACC,OAAD,EAAUY,CAAC,IAAI;AACrBA,EAAAA,CAAC,CAACC,UAAF,GAAe,CAACD,CAAC,CAACC,UAAlB;AACA,SAAOD,CAAP;AACD,CAHO,CADM,CAAhB,C,CAOA;;AACA,gBAAe,MAAM;AACnB,sBACE;AAAK,IAAA,KAAK,EAAEX,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA,2BACE;AAAG,MAAA,SAAS,EAAG,aAAYD,KAAK,GAAG,CAAE,KAAIC,MAAM,GAAG,CAAE,GAApD;AAAA,gBACGY,IAAI,CAACC,GAAL,CAASH,CAAC,iBACT;AAAG,QAAA,SAAS,EAAC,KAAb;AAAA,gCACE;AAAM,UAAA,CAAC,EAAEjB,GAAG,CAACiB,CAAD,CAAZ;AAAiB,UAAA,IAAI,EAAEN,KAAK,CAACM,CAAC,CAACE,IAAF,CAAOE,GAAR;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAG,aAAYrB,GAAG,CAACsB,QAAJ,CAAaL,CAAb,CAAgB,GAA9C;AAAkD,UAAA,EAAE,EAAC,OAArD;AAAA,oBACGA,CAAC,CAACE,IAAF,CAAOE;AADV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAyB,IAAGJ,CAAC,CAACE,IAAF,CAAOE,GAAI,EAAvC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAfD","sourcesContent":["import React from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { arc as d3Arc, pie as d3Pie } from 'd3-shape';\nimport { csvParse } from 'd3-dsv';\n\n// Same as data.csv\nimport dataCsv from './data';\n\n\n// import './chart.css';\n\n\n\nconst width = 960,\n  height = 500,\n  radius = Math.min(width, height) / 2;\n\nconst color = scaleOrdinal().range([\n  '#98abc5',\n  '#8a89a6',\n  '#7b6888',\n  '#6b486b',\n  '#a05d56',\n  '#d0743c',\n  '#ff8c00',\n]);\n\nconst arc = d3Arc()\n  .outerRadius(radius - 10)\n  .innerRadius(radius - 70);\n\nconst pie = d3Pie()\n  .sort(null)\n  .value(function(d) {\n    return d.population;\n  });\n\nconst data = pie(\n  csvParse(dataCsv, d => {\n    d.population = +d.population;\n    return d;\n  })\n);\n\n// <DonutChart/>\nexport default () => {\n  return (\n    <svg width={width} height={height}>\n      <g transform={`translate(${width / 2}, ${height / 2})`}>\n        {data.map(d => (\n          <g className=\"arc\" key={`a${d.data.age}`}>\n            <path d={arc(d)} fill={color(d.data.age)} />\n            <text transform={`translate(${arc.centroid(d)})`} dy=\".35em\">\n              {d.data.age}\n            </text>\n          </g>\n        ))}\n      </g>\n    </svg>\n  );\n};"]},"metadata":{},"sourceType":"module"}