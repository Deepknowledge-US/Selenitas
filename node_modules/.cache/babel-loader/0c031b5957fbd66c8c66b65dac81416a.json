{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel';\nimport Chart from '../D3/Chart/Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Receiver = ({\n  payload,\n  publish\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [monitors, setMonitors] = useState([]);\n  const [init, setInit] = useState(false); // Datos de prueba. Tenemos una lista de variables a representar.\n  // Cada entrada de esta lista es un map con 2 pares: \n  // id:nombre_variable, values:Lista_de_valores (que a su vez es un map con 2 pares -> time (valor en eje x) y valor de ese instante (valor en eje y)  )\n\n  const values_1 = {\n    id: 'a_var_to_track',\n    values: [{\n      time: 0,\n      value: 1\n    }]\n  };\n  const values_2 = {\n    id: 'acum_values',\n    values: [{\n      time: 0,\n      value: 1\n    }]\n  };\n  const initialData = [values_1, values_2];\n  useEffect(() => {\n    if (payload.topic) {\n      setMessages(messages => [...messages, payload]);\n\n      if (payload.topic.includes('panel_info')) {\n        // console.log('--- start panel_info ---');\n        const jsonObject = JSON.parse(payload.message);\n\n        for (const [k, v] of Object.entries(jsonObject)) {\n          if (k === 'Monitor') {\n            console.log('Creando ventana: ', k);\n            console.log('\\nEN PANEL INFO', v);\n          } // createWindow(v, publish)\n\n        } // console.log('--- end ---');\n\n      } else if (payload.topic.includes('update')) {\n        console.log(payload.topic);\n        console.log('--- start update ---');\n        const jsonObject = JSON.parse(payload.message);\n\n        if (monitors.length === 0) {\n          setInit(true);\n\n          for (const [k, v] of Object.entries(jsonObject)) {\n            // console.log('\\nEn el init',k, v)\n            const vals = {\n              id: k,\n              values: [{\n                time: 0,\n                value: v\n              }]\n            };\n            monitors.push(vals);\n          }\n        } else {\n          for (const [k, v] of Object.entries(jsonObject)) {\n            console.log('\\nEN EL INIT k', k, '\\nv', v);\n\n            for (let aVar of monitors) {\n              if (aVar.id === k) {\n                const lastElement = aVar.values[aVar.values.length - 1];\n                const newTime = lastElement.time + 1;\n                const newInput = {\n                  time: newTime,\n                  value: v\n                };\n                aVar.values.push(newInput);\n              }\n            }\n          } // console.log(monitors)\n\n        } // for (const [k,v] of Object.entries(jsonObject) ) {\n        // \tconsole.log('\\nk',k,'\\nv',v)\n        // }\n\n\n        console.log('--- end ---');\n      }\n    }\n  }, [payload, publish]);\n\n  const renderListItem = item => /*#__PURE__*/_jsxDEV(List.Item, {\n    children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n      title: item.topic,\n      description: item.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"Receiver\",\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      size: \"small\",\n      bordered: true,\n      dataSource: messages,\n      renderItem: renderListItem,\n      style: {\n        maxHeight: '15em',\n        overflow: 'scroll'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this), init && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          data: monitors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Receiver, \"SeieVsyWNqqYNrkO2hv+PqXrGGU=\");\n\n_c = Receiver;\nexport default Receiver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Receiver\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js"],"names":["React","useEffect","useState","Card","List","createWindow","Chart","Receiver","payload","publish","messages","setMessages","monitors","setMonitors","init","setInit","values_1","id","values","time","value","values_2","initialData","topic","includes","jsonObject","JSON","parse","message","k","v","Object","entries","console","log","length","vals","push","aVar","lastElement","newTime","newInput","renderListItem","item","maxHeight","overflow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel'\nimport Chart from '../D3/Chart/Chart'\n\nconst Receiver = ({ payload, publish }) => {\n\tconst [messages, setMessages] = useState([])\n\tconst [monitors, setMonitors] = useState([])\n\tconst [init, setInit]         = useState(false)\n\n\n\t// Datos de prueba. Tenemos una lista de variables a representar.\n\t// Cada entrada de esta lista es un map con 2 pares: \n\t// id:nombre_variable, values:Lista_de_valores (que a su vez es un map con 2 pares -> time (valor en eje x) y valor de ese instante (valor en eje y)  )\n\tconst values_1 = {\n\t\tid: 'a_var_to_track',\n\t\tvalues: [\n\t\t\t{time: 0, value:1},\n\t\t]\n\t};\n\n\tconst values_2 = {\n\t\tid: 'acum_values',\n\t\tvalues: [\n\t\t\t{time: 0, value: 1},\n\t\t]\n\t};\n\n\tconst initialData = [\n\t\tvalues_1,\n\t\tvalues_2\n\t];\n\n\tuseEffect(() => {\n\t\tif (payload.topic) {\n\t\t\tsetMessages(messages => [...messages, payload]);\n\t\t\tif (payload.topic.includes('panel_info') ) {\n\n\t\t\t\t// console.log('--- start panel_info ---');\n\t\t\t\tconst jsonObject = JSON.parse(payload.message);\n\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\tif (k === 'Monitor') {\n\t\t\t\t\t\tconsole.log('Creando ventana: ', k)\n\t\t\t\t\t\tconsole.log('\\nEN PANEL INFO',v)\n\t\t\t\t\t}\n\n\t\t\t\t\t// createWindow(v, publish)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// console.log('--- end ---');\n\t\t\t}\n\t\t\telse if ( payload.topic.includes('update') ) {\n\t\t\t\tconsole.log(payload.topic)\n\n\t\t\t\tconsole.log('--- start update ---');\n\t\t\t\tconst jsonObject = JSON.parse(payload.message);\n\n\t\t\t\tif (monitors.length === 0) {\n\t\t\t\t\tsetInit(true)\n\n\t\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\t\t// console.log('\\nEn el init',k, v)\n\t\t\t\t\t\tconst vals = {\n\t\t\t\t\t\t\tid: k,\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{time: 0, value:v},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmonitors.push(vals)\n\t\t\t\t\t}\n\n\t\t\t\t}else{\n\n\t\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\t\tconsole.log('\\nEN EL INIT k',k,'\\nv',v)\n\t\t\t\t\t\tfor (let aVar of monitors) {\n\t\t\t\t\t\t\tif (aVar.id === k) {\n\t\t\t\t\t\t\t\tconst lastElement  \t= aVar.values[aVar.values.length -1];\n\t\t\t\t\t\t\t\tconst newTime  \t\t= lastElement.time + 1;\n\t\t\t\t\t\t\t\tconst newInput\t\t= {time: newTime, value:v};\n\t\t\t\t\t\t\t\taVar.values.push(newInput)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(monitors)\n\t\t\t\t}\n\t\t\t\t// for (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t// \tconsole.log('\\nk',k,'\\nv',v)\n\t\t\t\t// }\n\t\t\t\t\n\t\t\t\tconsole.log('--- end ---');\n\t\t\t}\n\t\t}\n\t}, [payload, publish]);\n\n\tconst renderListItem = (item) => (\n\t\t<List.Item>\n\t\t\t<List.Item.Meta\n\t\t\t\ttitle={item.topic}\n\t\t\t\tdescription={item.message}\n\t\t\t/>\n\t\t</List.Item>\n\t);\n\n\treturn (\n\t\t<Card title=\"Receiver\">\n\t\t\t<List\n\t\t\t\tsize=\"small\"\n\t\t\t\tbordered\n\t\t\t\tdataSource={messages}\n\t\t\t\trenderItem={renderListItem}\n\t\t\t\tstyle={{maxHeight:'15em' ,overflow:'scroll'}}\n\t\t\t/>\n\t\t\t{ init && \n\t\t\t\t<ul>\n\t\t\t\t\t<li><Chart data={monitors} /></li>\n\t\t\t\t</ul>\n\t\t\t}\n\t\t\t\n\t\t</Card>\n\t);\n}\n\nexport default Receiver;\n"]},"metadata":{},"sourceType":"module"}