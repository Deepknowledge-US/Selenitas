{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js\";\nimport React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection'; // Same as data.tsv\n\nimport dataTsv from './dataChart';\nimport './cssChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst svgWidth = 960,\n      svgHeight = 500; //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n\nconst margin = {\n  top: 20,\n  right: 80,\n  bottom: 30,\n  left: 50\n},\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\nconst parseTime = timeParse('%Y%m%d');\nconst x = scaleTime().range([0, width]),\n      y = scaleLinear().range([height, 0]),\n      z = scaleOrdinal(schemeCategory10);\nconst line = d3Line().curve(curveBasis).x(d => x(d.date)).y(d => y(d.temperature));\nconst data = tsvParse(dataTsv, (d, _, columns) => {\n  d.date = parseTime(d.date);\n\n  for (let i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];\n\n  return d;\n});\nconst cities = data.columns.slice(1).map(id => {\n  return {\n    id,\n    values: data.map(d => {\n      return {\n        date: d.date,\n        temperature: d[id]\n      };\n    })\n  };\n});\nx.domain(extent(data, d => d.date));\ny.domain([min(cities, c => min(c.values, d => d.temperature)), max(cities, c => max(c.values, d => d.temperature))]);\nz.domain(cities.map(c => c.id));\n\nconst Chart = props => {\n  /*#__PURE__*/\n  _jsxDEV(\"svg\", {\n    width: svgWidth,\n    height: svgHeight,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${margin.left}, ${margin.top})`,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"axis axis--x\",\n        transform: `translate(0, ${height})`,\n        ref: node => select(node).call(axisBottom(x))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"axis axis--y\",\n        ref: node => select(node).call(axisLeft(y)),\n        children: /*#__PURE__*/_jsxDEV(\"text\", {\n          transform: \"rotate(-90)\",\n          y: \"6\",\n          dy: \"0.71em\",\n          fill: \"#000\",\n          children: \"Temperature, \\xBAF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }, this), cities.map(city => {\n        const [lastD] = city.values.slice(-1);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"city\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            className: \"line\",\n            d: line(city.values),\n            style: {\n              stroke: z(city.id)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            transform: `translate(${x(lastD.date)}, ${y(lastD.temperature)})`,\n            x: 3,\n            dy: \"0.35em\",\n            style: {\n              font: '10px sans-serif'\n            },\n            children: city.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 7\n          }, this)]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 2\n  }, this);\n};\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js"],"names":["React","scaleOrdinal","scaleLinear","scaleTime","tsvParse","schemeCategory10","timeParse","line","d3Line","curveBasis","min","max","extent","axisBottom","axisLeft","select","dataTsv","svgWidth","svgHeight","margin","top","right","bottom","left","width","height","parseTime","x","range","y","z","curve","d","date","temperature","data","_","columns","i","n","length","c","cities","slice","map","id","values","domain","Chart","props","node","call","city","lastD","stroke","font"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection';\n\n// Same as data.tsv\nimport dataTsv from './dataChart';\n\nimport './cssChart.css';\n\nconst svgWidth = 960,\n\tsvgHeight = 500;\n\n//Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\nconst margin = { top: 20, right: 80, bottom: 30, left: 50 },\n\twidth = svgWidth - margin.left - margin.right,\n\theight = svgHeight - margin.top - margin.bottom;\n\nconst parseTime = timeParse('%Y%m%d');\n\nconst x = scaleTime().range([0, width]),\n\ty = scaleLinear().range([height, 0]),\n\tz = scaleOrdinal(schemeCategory10);\n\nconst line = d3Line()\n\t.curve(curveBasis)\n\t.x(d => x(d.date))\n\t.y(d => y(d.temperature));\n\nconst data = tsvParse(dataTsv, (d, _, columns) => {\n\td.date = parseTime(d.date);\n\tfor (let i = 1, n = columns.length, c; i < n; ++i)\n\t\td[(c = columns[i])] = +d[c];\n\treturn d;\n});\n\nconst cities = data.columns.slice(1).map(id => {\n\treturn {\n\t\tid,\n\t\tvalues: data.map(d => {\n\t\t\treturn { date: d.date, temperature: d[id] };\n\t\t}),\n\t};\n});\n\nx.domain(extent(data, d => d.date));\n\ny.domain([\n\tmin(cities, c => min(c.values, d => d.temperature)),\n\tmax(cities, c => max(c.values, d => d.temperature)),\n]);\n\nz.domain(cities.map(c => c.id));\n\nconst Chart = (props) => {\n\n\n\t<svg width={svgWidth} height={svgHeight}>\n\t\t<g transform={`translate(${margin.left}, ${margin.top})`}>\n\t\t\t<g\n\t\t\t\tclassName=\"axis axis--x\"\n\t\t\t\ttransform={`translate(0, ${height})`}\n\t\t\t\tref={node => select(node).call(axisBottom(x))}\n\t\t\t/>\n\t\t\t<g className=\"axis axis--y\" ref={node => select(node).call(axisLeft(y))}>\n\t\t\t\t<text transform=\"rotate(-90)\" y=\"6\" dy=\"0.71em\" fill=\"#000\">\n\t\t\t\t\tTemperature, ºF\n\t\t\t\t</text>\n\t\t\t</g>\n\t\t\t{cities.map(city => {\n\t\t\t\tconst [lastD] = city.values.slice(-1);\n\t\t\t\treturn (\n\t\t\t\t\t<g className=\"city\" key={city.id}>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tclassName=\"line\"\n\t\t\t\t\t\t\td={line(city.values)}\n\t\t\t\t\t\t\tstyle={{ stroke: z(city.id) }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<text\n\t\t\t\t\t\t\ttransform={`translate(${x(lastD.date)}, ${y(lastD.temperature)})`}\n\t\t\t\t\t\t\tx={3}\n\t\t\t\t\t\t\tdy=\"0.35em\"\n\t\t\t\t\t\t\tstyle={{ font: '10px sans-serif' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{city.id}\n\t\t\t\t\t\t</text>\n\t\t\t\t\t</g>\n\t\t\t\t);\n\t\t\t})}\n\t\t</g>\n\t</svg>\n};\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}