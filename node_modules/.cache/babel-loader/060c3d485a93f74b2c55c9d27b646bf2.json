{"ast":null,"code":"import React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection'; // Same as data.tsv\n\nimport dataTsv from './dataChart2';\nimport './cssChart2.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart2 = props => {\n  // /*\n  // ####################################\n  // ########## CREATE DATASET ##########\n  // ####################################\n  // define a javascript object to hold our dataset\n  var dataset = {\n    // points will be x,y coordinates\n    points: [],\n    numPoints: 0,\n    color: \"#913f92\",\n    radius: 2,\n    minX: 0,\n    maxX: 500,\n    minY: 0,\n    maxY: 1000\n  }; // Define SVG size and padding (extra white space to prevent overlap).\n\n  var width = 600;\n  var height = 250;\n  var padding = {\n    // buffer used to prevent chart element overlap\n    top: 20,\n    right: 25,\n    bottom: 30,\n    left: 60\n  }; // D3 scales are used to translate your numerical data into svg space\n  // define scales\n\n  var xScale = scaleLinear // predefined d3 function to create scale\n  .domain([dataset.minX, dataset.maxX]) // domain defines the coordinate system of your data\n  .range([padding.left, width - padding.right]); // range defines the coordinate system of your svg\n\n  var yScale = d3.scale.linear().domain([dataset.minY, dataset.maxY]).range([height - padding.bottom, padding.top]); // notice that the larger value is the first listed\n  // in the yScale range.\n  // define axis behavior in D3\n\n  var xAxis = d3.svg.axis() // the d3 axis object\n  .scale(xScale) // set the scale to what we just defined\n  .orient(\"bottom\") // orient tick direction\n  .ticks(5); // try to do 5 ticks. Won't always be this many\n\n  var yAxis = d3.svg.axis().scale(yScale).orient(\"left\").ticks(5); // /*\n  // ####################################\n  // ######## BUILD SVG USING D3 ########\n  // ####################################\n  // Use D3 to insert an SVG element into our HTML document\n\n  var svg = d3.select(\"#container\") // grab the <div> tag which has the id #svgcontainer\n  .append(\"svg\") // append an <svg> tag into this container\n  .attr(\"width\", width) // set the svg's width attribute\n  .attr(\"height\", height); // set the svg's height attribute\n  // /*\n  // actually insert x axis into html\n\n  svg.append(\"g\") // new group element\n  .attr(\"class\", \"xAxis\") // give it the css class 'xAxis'\n  .attr(\"transform\", \"translate\" + \"(0,\" + (height - padding.bottom) + \")\") // translate the axis to the bottom of the svg\n  .call(xAxis); // refer to axis variables to define scale behavior\n\n  svg.append(\"g\").attr(\"class\", \"yAxis\").attr(\"transform\", \"translate(\" + padding.left + \",\" + 0 + \")\").call(yAxis); // /*\n  // ####################################\n  // ######### Helper Functions #########\n  // ####################################\n  // event handlers for interactivity\n\n  var handleMouseOver = function (d, i) {\n    // Use D3 to select element, change color and size\n    d3.select(this).attr({\n      fill: \"orange\",\n      r: dataset.radius\n    }).attr(\"stroke\", \"black\").attr(\"stroke-width\", \"1px\"); // Specify where to put label of text\n\n    svg.append(\"text\").attr({\n      id: \"t\" + Math.round(d.x) + \"-\" + Math.round(d.y) + \"-\" + i,\n      // Create an id for text so we can select it later for removing on mouseout\n      x: function () {\n        return xScale(d.x) - 30;\n      },\n      y: function () {\n        return yScale(d.y) - 15;\n      }\n    }).text(function () {\n      return [Math.round(d.x), Math.round(d.y)]; // Value of the text\n    });\n  };\n\n  var handleMouseOut = function (d, i) {\n    // Use D3 to select element, change color back to normal\n    d3.select(this).attr({\n      fill: dataset.color,\n      r: dataset.radius\n    }).attr(\"stroke\", \"none\"); // Select text by id and then remove\n\n    d3.select(\"#t\" + Math.round(d.x) + \"-\" + Math.round(d.y) + \"-\" + i).remove(); // Remove text location\n  }; // define a function to do the plotting to avoid code redundancy\n\n\n  var updateChart = function () {\n    // Update scale domains.\n    // redefining the x and y minimums and maximums\n    xScale.domain([d3.min(dataset.points, function (d) {\n      // return minimum x value\n      return d.x;\n    }), d3.max(dataset.points, function (d) {\n      // return maximum x value\n      return d.x;\n    })]);\n    yScale.domain([d3.min(dataset.points, function (d) {\n      // return minimum y value\n      return d.y;\n    }), d3.max(dataset.points, function (d) {\n      // return maximum y value\n      return d.y;\n    })]); // here's the d3 magic\n    // this basically primes the svg to do stuff with <circle> tags\n    // d3 does inventory and figures out how many <circle> tags currently exist in svg.\n\n    var d3Circles = svg.selectAll(\"circle\").data(dataset.points); // rebind dataset.points just in case it's been updated\n    // if there aren't enough circle tags, .enter().append() creates new ones for the data points\n\n    d3Circles.enter().append(\"circle\").attr(\"cx\", function (d) {\n      return xScale(0); // initialize circle at origin\n    }).attr(\"cy\", function (d) {\n      return yScale(0); // initialize circle at origin\n    }).on(\"mouseover\", handleMouseOver) // bind mouse-over event to each circle\n    .on(\"mouseout\", handleMouseOut); // bind mouse-off event to each circle\n    // exit().remove() will trash extra circles for us if we have too many\n\n    d3Circles.exit() // get svg elements we need to remove\n    .transition() // default transition\n    .attr(\"cx\", function (d) {\n      return xScale(0); // initialize circle at origin\n    }).attr(\"cy\", function (d) {\n      return yScale(0); // initialize circle at origin\n    }).remove(); // get rid of em\n    // update circle locations, both new and old with fancy transitions\n\n    d3Circles.attr(\"fill\", dataset.color) // make dots purple by default\n    .attr(\"r\", dataset.radius) // make radius smaller\n    .attr(\"fill\", \"gray\") // make dots gray by default\n    .attr(\"cx\", function (d) {\n      return xScale(d.x); // move circle to new x coordinates\n    }).attr(\"cy\", function (d) {\n      return yScale(d.y); // move circle to new y coordinates\n    }); // update axes to represent new values\n\n    svg.select(\".xAxis\").call(xAxis);\n    svg.select(\".yAxis\").call(yAxis);\n  }; // run updateChart to plot initial set of points\n\n\n  updateChart(); // function for adding an additional point to our dataset\n\n  var addPoint = function (param) {\n    dataset.numPoints++;\n    var yCor = GB[param][GB[param].length - 1];\n    console.log(yCor);\n    var point = {\n      x: dataset.numPoints,\n      y: yCor\n    };\n    dataset.points.push(point);\n    updateChart();\n  }; // function for regenerating random data for our dataset\n\n\n  var regenerateData = function (param) {\n    // updateDataset(param);\n    addPoint(param);\n    updateChart();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: svg\n  }, void 0, false);\n};\n\n_c = Chart2;\nexport default Chart2;\n/*\n\n\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart2\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/D3/Chart2/Chart2.js"],"names":["React","scaleOrdinal","scaleLinear","scaleTime","tsvParse","schemeCategory10","timeParse","line","d3Line","curveBasis","min","max","extent","axisBottom","axisLeft","select","dataTsv","Chart2","props","dataset","points","numPoints","color","radius","minX","maxX","minY","maxY","width","height","padding","top","right","bottom","left","xScale","domain","range","yScale","d3","scale","linear","xAxis","svg","axis","orient","ticks","yAxis","append","attr","call","handleMouseOver","d","i","fill","r","id","Math","round","x","y","text","handleMouseOut","remove","updateChart","d3Circles","selectAll","data","enter","on","exit","transition","addPoint","param","yCor","GB","length","console","log","point","push","regenerateData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection';\n\n// Same as data.tsv\nimport dataTsv from './dataChart2';\n\nimport './cssChart2.css';\n\n\nconst Chart2 = (props) => {\n\n\t// /*\n\t// ####################################\n\t// ########## CREATE DATASET ##########\n\t// ####################################\n\n\t// define a javascript object to hold our dataset\n\tvar dataset = {\n\t\t// points will be x,y coordinates\n\t\tpoints: [],\n\t\tnumPoints: 0,\n\t\tcolor: \"#913f92\",\n\t\tradius: 2,\n\t\tminX: 0,\n\t\tmaxX: 500,\n\t\tminY: 0,\n\t\tmaxY: 1000,\n\t};\n\n\t// Define SVG size and padding (extra white space to prevent overlap).\n\tvar width = 600;\n\tvar height = 250;\n\tvar padding = {\n\t\t// buffer used to prevent chart element overlap\n\t\ttop: 20,\n\t\tright: 25,\n\t\tbottom: 30,\n\t\tleft: 60,\n\t};\n\n\t// D3 scales are used to translate your numerical data into svg space\n\n\t// define scales\n\tvar xScale = scaleLinear // predefined d3 function to create scale\n\t\t.domain([dataset.minX, dataset.maxX]) // domain defines the coordinate system of your data\n\t\t.range([padding.left, width - padding.right]); // range defines the coordinate system of your svg\n\n\tvar yScale = d3.scale\n\t\t.linear()\n\t\t.domain([dataset.minY, dataset.maxY])\n\t\t.range([height - padding.bottom, padding.top]); // notice that the larger value is the first listed\n\t// in the yScale range.\n\n\t// define axis behavior in D3\n\tvar xAxis = d3.svg\n\t\t.axis() // the d3 axis object\n\t\t.scale(xScale) // set the scale to what we just defined\n\t\t.orient(\"bottom\") // orient tick direction\n\t\t.ticks(5); // try to do 5 ticks. Won't always be this many\n\n\tvar yAxis = d3.svg.axis().scale(yScale).orient(\"left\").ticks(5);\n\t// /*\n\n\t// ####################################\n\t// ######## BUILD SVG USING D3 ########\n\t// ####################################\n\n\t// Use D3 to insert an SVG element into our HTML document\n\tvar svg = d3\n\t\t.select(\"#container\") // grab the <div> tag which has the id #svgcontainer\n\t\t.append(\"svg\") // append an <svg> tag into this container\n\t\t.attr(\"width\", width) // set the svg's width attribute\n\t\t.attr(\"height\", height); // set the svg's height attribute\n\n\t// /*\n\t// actually insert x axis into html\n\tsvg\n\t\t.append(\"g\") // new group element\n\t\t.attr(\"class\", \"xAxis\") // give it the css class 'xAxis'\n\t\t.attr(\"transform\", \"translate\" + \"(0,\" + (height - padding.bottom) + \")\") // translate the axis to the bottom of the svg\n\t\t.call(xAxis); // refer to axis variables to define scale behavior\n\n\tsvg\n\t\t.append(\"g\")\n\t\t.attr(\"class\", \"yAxis\")\n\t\t.attr(\"transform\", \"translate(\" + padding.left + \",\" + 0 + \")\")\n\t\t.call(yAxis);\n\n\t// /*\n\t// ####################################\n\t// ######### Helper Functions #########\n\t// ####################################\n\n\t// event handlers for interactivity\n\tvar handleMouseOver = function (d, i) {\n\t\t// Use D3 to select element, change color and size\n\t\td3.select(this)\n\t\t\t.attr({\n\t\t\t\tfill: \"orange\",\n\t\t\t\tr: dataset.radius ,\n\t\t\t})\n\t\t\t.attr(\"stroke\", \"black\")\n\t\t\t.attr(\"stroke-width\", \"1px\");\n\n\t\t// Specify where to put label of text\n\t\tsvg\n\t\t\t.append(\"text\")\n\t\t\t.attr({\n\t\t\t\tid: \"t\" + Math.round(d.x) + \"-\" + Math.round(d.y) + \"-\" + i, // Create an id for text so we can select it later for removing on mouseout\n\t\t\t\tx: function () {\n\t\t\t\t\treturn xScale(d.x) - 30;\n\t\t\t\t},\n\t\t\t\ty: function () {\n\t\t\t\t\treturn yScale(d.y) - 15;\n\t\t\t\t},\n\t\t\t\t})\n\t\t\t.text(function () {\n\t\t\t\treturn [Math.round(d.x), Math.round(d.y)]; // Value of the text\n\t\t\t});\n\t};\n\n\tvar handleMouseOut = function (d, i) {\n\t// Use D3 to select element, change color back to normal\n\t\td3.select(this)\n\t\t\t.attr({\n\t\t\t\tfill: dataset.color,\n\t\t\t\tr: dataset.radius,\n\t\t\t})\n\t\t\t.attr(\"stroke\", \"none\");\n\n\t\t// Select text by id and then remove\n\t\td3.select(\"#t\" + Math.round(d.x) + \"-\" + Math.round(d.y) + \"-\" + i).remove(); // Remove text location\n\t};\n\n\t// define a function to do the plotting to avoid code redundancy\n\tvar updateChart = function () {\n\t\t// Update scale domains.\n\t\t// redefining the x and y minimums and maximums\n\t\txScale.domain([\n\t\t\td3.min(dataset.points, function (d) {\n\t\t\t\t// return minimum x value\n\t\t\t\treturn d.x;\n\t\t\t}),\n\t\t\td3.max(dataset.points, function (d) {\n\t\t\t\t// return maximum x value\n\t\t\t\treturn d.x;\n\t\t\t}),\n\t\t]);\n\t\tyScale.domain([\n\t\t\td3.min(dataset.points, function (d) {\n\t\t\t\t// return minimum y value\n\t\t\t\treturn d.y;\n\t\t\t}),\n\t\t\td3.max(dataset.points, function (d) {\n\t\t\t\t// return maximum y value\n\t\t\t\treturn d.y;\n\t\t\t}),\n\t\t]);\n\n\t\t// here's the d3 magic\n\t\t// this basically primes the svg to do stuff with <circle> tags\n\n\t\t// d3 does inventory and figures out how many <circle> tags currently exist in svg.\n\t\tvar d3Circles = svg.selectAll(\"circle\").data(dataset.points); // rebind dataset.points just in case it's been updated\n\n\t\t// if there aren't enough circle tags, .enter().append() creates new ones for the data points\n\t\td3Circles\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", function (d) {\n\t\t\t\treturn xScale(0); // initialize circle at origin\n\t\t\t})\n\t\t\t.attr(\"cy\", function (d) {\n\t\t\t\treturn yScale(0); // initialize circle at origin\n\t\t\t})\n\t\t\t.on(\"mouseover\", handleMouseOver) // bind mouse-over event to each circle\n\t\t\t.on(\"mouseout\", handleMouseOut); // bind mouse-off event to each circle\n\n\t\t// exit().remove() will trash extra circles for us if we have too many\n\t\td3Circles\n\t\t\t.exit() // get svg elements we need to remove\n\t\t\t.transition() // default transition\n\t\t\t.attr(\"cx\", function (d) {\n\t\t\t\treturn xScale(0); // initialize circle at origin\n\t\t\t})\n\t\t\t.attr(\"cy\", function (d) {\n\t\t\t\treturn yScale(0); // initialize circle at origin\n\t\t\t})\n\t\t\t.remove(); // get rid of em\n\n\t\t// update circle locations, both new and old with fancy transitions\n\t\td3Circles\n\t\t\t.attr(\"fill\", dataset.color) // make dots purple by default\n\t\t\t.attr(\"r\", dataset.radius ) // make radius smaller\n\t\t\t.attr(\"fill\", \"gray\") // make dots gray by default\n\t\t\t.attr(\"cx\", function (d) {\n\t\t\treturn xScale(d.x); // move circle to new x coordinates\n\t\t\t})\n\t\t\t.attr(\"cy\", function (d) {\n\t\t\treturn yScale(d.y); // move circle to new y coordinates\n\t\t\t});\n\n\t\t// update axes to represent new values\n\t\tsvg.select(\".xAxis\").call(xAxis);\n\n\t\tsvg.select(\".yAxis\").call(yAxis);\n\t};\n\n\t// run updateChart to plot initial set of points\n\tupdateChart();\n\n\t// function for adding an additional point to our dataset\n\tvar addPoint = function (param) {\n\t\tdataset.numPoints++;\n\t\tvar yCor = GB[param][GB[param].length - 1]\n\t\tconsole.log(yCor)\n\t\tvar point = {\n\t\t\tx: dataset.numPoints,\n\t\t\ty: yCor\n\t\t};\n\n\t\tdataset.points.push(point);\n\t\tupdateChart();\n\t};\n\n\n\t// function for regenerating random data for our dataset\n\tvar regenerateData = function (param) {\n\t\t// updateDataset(param);\n\t\taddPoint(param)\n\t\tupdateChart();\n\t};\n\n\treturn(\n\t\t<>\n\t\t\t{svg}\n\t\t</>\n\t);\n\n\n};\n\nexport default Chart2\n\n/*\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}