{"ast":null,"code":"'use strict';\n\nvar Transform = require('readable-stream').Transform;\n\nvar duplexify = require('duplexify');\n/* global wx */\n\n\nvar socketTask;\nvar proxy;\nvar stream;\n\nfunction buildProxy() {\n  var proxy = new Transform();\n\n  proxy._write = function (chunk, encoding, next) {\n    socketTask.send({\n      data: chunk.buffer,\n      success: function () {\n        next();\n      },\n      fail: function (errMsg) {\n        next(new Error(errMsg));\n      }\n    });\n  };\n\n  proxy._flush = function socketEnd(done) {\n    socketTask.close({\n      success: function () {\n        done();\n      }\n    });\n  };\n\n  return proxy;\n}\n\nfunction setDefaultOpts(opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost';\n  }\n\n  if (!opts.path) {\n    opts.path = '/';\n  }\n\n  if (!opts.wsOptions) {\n    opts.wsOptions = {};\n  }\n}\n\nfunction buildUrl(opts, client) {\n  var protocol = opts.protocol === 'wxs' ? 'wss' : 'ws';\n  var url = protocol + '://' + opts.hostname + opts.path;\n\n  if (opts.port && opts.port !== 80 && opts.port !== 443) {\n    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n  }\n\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n\n  return url;\n}\n\nfunction bindEventHandler() {\n  socketTask.onOpen(function () {\n    stream.setReadable(proxy);\n    stream.setWritable(proxy);\n    stream.emit('connect');\n  });\n  socketTask.onMessage(function (res) {\n    var data = res.data;\n    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');\n    proxy.push(data);\n  });\n  socketTask.onClose(function () {\n    stream.end();\n    stream.destroy();\n  });\n  socketTask.onError(function (res) {\n    stream.destroy(new Error(res.errMsg));\n  });\n}\n\nfunction buildStream(client, opts) {\n  opts.hostname = opts.hostname || opts.host;\n\n  if (!opts.hostname) {\n    throw new Error('Could not determine host. Specify host manually.');\n  }\n\n  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  setDefaultOpts(opts);\n  var url = buildUrl(opts, client);\n  socketTask = wx.connectSocket({\n    url: url,\n    protocols: [websocketSubProtocol]\n  });\n  proxy = buildProxy();\n  stream = duplexify.obj();\n\n  stream._destroy = function (err, cb) {\n    socketTask.close({\n      success: function () {\n        cb && cb(err);\n      }\n    });\n  };\n\n  var destroyRef = stream.destroy;\n\n  stream.destroy = function () {\n    stream.destroy = destroyRef;\n    var self = this;\n    setTimeout(function () {\n      socketTask.close({\n        fail: function () {\n          self._destroy(new Error());\n        }\n      });\n    }, 0);\n  }.bind(stream);\n\n  bindEventHandler();\n  return stream;\n}\n\nmodule.exports = buildStream;","map":{"version":3,"sources":["/home/one/node_modules/mqtt/lib/connect/wx.js"],"names":["Transform","require","duplexify","socketTask","proxy","stream","buildProxy","_write","chunk","encoding","next","send","data","buffer","success","fail","errMsg","Error","_flush","socketEnd","done","close","setDefaultOpts","opts","hostname","path","wsOptions","buildUrl","client","protocol","url","port","transformWsUrl","bindEventHandler","onOpen","setReadable","setWritable","emit","onMessage","res","ArrayBuffer","Buffer","from","push","onClose","end","destroy","onError","buildStream","host","websocketSubProtocol","protocolId","protocolVersion","wx","connectSocket","protocols","obj","_destroy","err","cb","destroyRef","self","setTimeout","bind","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar Transform = require('readable-stream').Transform\nvar duplexify = require('duplexify')\n\n/* global wx */\nvar socketTask\nvar proxy\nvar stream\n\nfunction buildProxy () {\n  var proxy = new Transform()\n  proxy._write = function (chunk, encoding, next) {\n    socketTask.send({\n      data: chunk.buffer,\n      success: function () {\n        next()\n      },\n      fail: function (errMsg) {\n        next(new Error(errMsg))\n      }\n    })\n  }\n  proxy._flush = function socketEnd (done) {\n    socketTask.close({\n      success: function () {\n        done()\n      }\n    })\n  }\n\n  return proxy\n}\n\nfunction setDefaultOpts (opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost'\n  }\n  if (!opts.path) {\n    opts.path = '/'\n  }\n\n  if (!opts.wsOptions) {\n    opts.wsOptions = {}\n  }\n}\n\nfunction buildUrl (opts, client) {\n  var protocol = opts.protocol === 'wxs' ? 'wss' : 'ws'\n  var url = protocol + '://' + opts.hostname + opts.path\n  if (opts.port && opts.port !== 80 && opts.port !== 443) {\n    url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path\n  }\n  if (typeof (opts.transformWsUrl) === 'function') {\n    url = opts.transformWsUrl(url, opts, client)\n  }\n  return url\n}\n\nfunction bindEventHandler () {\n  socketTask.onOpen(function () {\n    stream.setReadable(proxy)\n    stream.setWritable(proxy)\n    stream.emit('connect')\n  })\n\n  socketTask.onMessage(function (res) {\n    var data = res.data\n\n    if (data instanceof ArrayBuffer) data = Buffer.from(data)\n    else data = Buffer.from(data, 'utf8')\n    proxy.push(data)\n  })\n\n  socketTask.onClose(function () {\n    stream.end()\n    stream.destroy()\n  })\n\n  socketTask.onError(function (res) {\n    stream.destroy(new Error(res.errMsg))\n  })\n}\n\nfunction buildStream (client, opts) {\n  opts.hostname = opts.hostname || opts.host\n\n  if (!opts.hostname) {\n    throw new Error('Could not determine host. Specify host manually.')\n  }\n\n  var websocketSubProtocol =\n    (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n      ? 'mqttv3.1'\n      : 'mqtt'\n\n  setDefaultOpts(opts)\n\n  var url = buildUrl(opts, client)\n  socketTask = wx.connectSocket({\n    url: url,\n    protocols: [websocketSubProtocol]\n  })\n\n  proxy = buildProxy()\n  stream = duplexify.obj()\n  stream._destroy = function (err, cb) {\n    socketTask.close({\n      success: function () {\n        cb && cb(err)\n      }\n    })\n  }\n\n  var destroyRef = stream.destroy\n  stream.destroy = function () {\n    stream.destroy = destroyRef\n\n    var self = this\n    setTimeout(function () {\n      socketTask.close({\n        fail: function () {\n          self._destroy(new Error())\n        }\n      })\n    }, 0)\n  }.bind(stream)\n\n  bindEventHandler()\n\n  return stream\n}\n\nmodule.exports = buildStream\n"]},"metadata":{},"sourceType":"script"}