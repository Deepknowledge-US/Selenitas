{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport devWarning from '../../_util/devWarning'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\n\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\n\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n      selectedRowKeys = _ref.selectedRowKeys,\n      defaultSelectedRowKeys = _ref.defaultSelectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectNone = _ref.onSelectNone,\n      onSelectMultiple = _ref.onSelectMultiple,\n      selectionColWidth = _ref.columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed,\n      customizeRenderCell = _ref.renderCell,\n      hideSelectAll = _ref.hideSelectAll,\n      _ref$checkStrictly = _ref.checkStrictly,\n      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      expandIconColumnIndex = config.expandIconColumnIndex,\n      getPopupContainer = config.getPopupContainer; // ======================== Caches ========================\n\n  var preserveRecordsRef = React.useRef(new Map()); // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || [], {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1];\n\n  var _useMemo = useMemo(function () {\n    return checkStrictly ? {\n      keyEntities: null\n    } : convertDataToEntities(data, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName]),\n      keyEntities = _useMemo.keyEntities; // Get flatten data\n\n\n  var flattedData = useMemo(function () {\n    return flattenData(pageData, childrenColumnName);\n  }, [pageData, childrenColumnName]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastSelectedKey = _useState2[0],\n      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys) {\n    var availableKeys;\n    var records;\n\n    if (preserveSelectedRowKeys) {\n      // Keep key if mark as preserveSelectedRowKeys\n      var newCache = new Map();\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n        return record;\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }));\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n\n              if (keySet.has(key)) {\n                keySet[\"delete\"](key);\n              } else {\n                keySet.add(key);\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys);\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys([]);\n          }\n        };\n      }\n\n      return selection;\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Support selection\n\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = /*#__PURE__*/React.createElement(Menu, {\n          getPopupContainer: getPopupContainer\n        }, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n          return /*#__PURE__*/React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n            }\n          }, text);\n        }));\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabled = flattedData.every(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return checkboxProps.disabled;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled && !!flattedData.length && checkedCurrentAll,\n        indeterminate: !checkedCurrentAll && checkedCurrentSome,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref2) {\n              var nativeEvent = _ref2.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              setLastSelectedKey(key);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Columns\n\n\n    var selectionColumn = _defineProperty({\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n\n    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {\n      var _columns = _toArray(columns),\n          expandColumn = _columns[0],\n          restColumns = _columns.slice(1);\n\n      var selectionFixed = fixed || getFixedType(restColumns[0]);\n\n      if (selectionFixed) {\n        expandColumn.fixed = selectionFixed;\n      }\n\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: selectionFixed\n      })].concat(_toConsumableArray(restColumns));\n    }\n\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/node_modules/antd/es/table/hooks/useSelection.js"],"names":["_toArray","_defineProperty","_extends","_slicedToArray","_toConsumableArray","_typeof","React","useState","useCallback","useMemo","DownOutlined","convertDataToEntities","conductCheck","arrAdd","arrDel","INTERNAL_COL_DEFINE","useMergedState","Checkbox","Dropdown","Menu","Radio","devWarning","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","getFixedType","column","fixed","flattenData","data","childrenColumnName","list","forEach","record","push","concat","useSelection","rowSelection","config","_ref","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","customizeRenderCell","renderCell","hideSelectAll","_ref$checkStrictly","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","expandIconColumnIndex","getPopupContainer","preserveRecordsRef","useRef","Map","_useMergedState","value","_useMergedState2","mergedSelectedKeys","setMergedSelectedKeys","_useMemo","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","key","checkboxProps","set","process","env","NODE_ENV","isCheckboxDisabled","r","_a","get","disabled","_useMemo2","_conductCheck","checkedKeys","halfCheckedKeys","_useMemo3","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","keys","slice","Set","derivedHalfSelectedKeySet","_useState","_useState2","lastSelectedKey","setLastSelectedKey","useEffect","setSelectedKeys","availableKeys","records","newCache","current","has","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","selectInvert","keySet","add","Array","from","selectNone","transformColumns","columns","recordKeys","filter","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","createElement","onSelectionClick","Item","onClick","className","overlay","allDisabled","checked","length","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref2","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","_checkedKeys","nextCheckedKeys","tempKeySet","renderSelectionCell","_renderCell","selectionColumn","width","columnTitle","render","_columns","expandColumn","restColumns","selectionFixed"],"mappings":"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","sourcesContent":["import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport devWarning from '../../_util/devWarning'; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\n\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\n\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,\n      selectedRowKeys = _ref.selectedRowKeys,\n      defaultSelectedRowKeys = _ref.defaultSelectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectNone = _ref.onSelectNone,\n      onSelectMultiple = _ref.onSelectMultiple,\n      selectionColWidth = _ref.columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed,\n      customizeRenderCell = _ref.renderCell,\n      hideSelectAll = _ref.hideSelectAll,\n      _ref$checkStrictly = _ref.checkStrictly,\n      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;\n\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName,\n      tableLocale = config.locale,\n      expandIconColumnIndex = config.expandIconColumnIndex,\n      getPopupContainer = config.getPopupContainer; // ======================== Caches ========================\n\n  var preserveRecordsRef = React.useRef(new Map()); // ========================= Keys =========================\n\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || [], {\n    value: selectedRowKeys\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSelectedKeys = _useMergedState2[0],\n      setMergedSelectedKeys = _useMergedState2[1];\n\n  var _useMemo = useMemo(function () {\n    return checkStrictly ? {\n      keyEntities: null\n    } : convertDataToEntities(data, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName]),\n      keyEntities = _useMemo.keyEntities; // Get flatten data\n\n\n  var flattedData = useMemo(function () {\n    return flattenData(pageData, childrenColumnName);\n  }, [pageData, childrenColumnName]); // Get all checkbox props\n\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n\n  var _useMemo2 = useMemo(function () {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      derivedSelectedKeys = _useMemo3[0],\n      derivedHalfSelectedKeys = _useMemo3[1];\n\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastSelectedKey = _useState2[0],\n      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys) {\n    var availableKeys;\n    var records;\n\n    if (preserveSelectedRowKeys) {\n      // Keep key if mark as preserveSelectedRowKeys\n      var newCache = new Map();\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        var record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n        return record;\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }));\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n\n              if (keySet.has(key)) {\n                keySet[\"delete\"](key);\n              } else {\n                keySet.add(key);\n              }\n            });\n            var keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys);\n          }\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys([]);\n          }\n        };\n      }\n\n      return selection;\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  var transformColumns = useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Support selection\n\n\n    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = /*#__PURE__*/React.createElement(Menu, {\n          getPopupContainer: getPopupContainer\n        }, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n          return /*#__PURE__*/React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n            }\n          }, text);\n        }));\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          overlay: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabled = flattedData.every(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return checkboxProps.disabled;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled && !!flattedData.length && checkedCurrentAll,\n        indeterminate: !checkedCurrentAll && checkedCurrentSome,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref2) {\n              var nativeEvent = _ref2.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                      halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              setLastSelectedKey(key);\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n          node = _renderCell.node,\n          checked = _renderCell.checked;\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Columns\n\n\n    var selectionColumn = _defineProperty({\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n\n    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {\n      var _columns = _toArray(columns),\n          expandColumn = _columns[0],\n          restColumns = _columns.slice(1);\n\n      var selectionFixed = fixed || getFixedType(restColumns[0]);\n\n      if (selectionFixed) {\n        expandColumn.fixed = selectionFixed;\n      }\n\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: selectionFixed\n      })].concat(_toConsumableArray(restColumns));\n    }\n\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}"]},"metadata":{},"sourceType":"module"}