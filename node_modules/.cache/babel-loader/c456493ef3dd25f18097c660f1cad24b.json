{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js\";\nimport React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection'; // Same as data.tsv\n\nimport dataTsv from './dataChart';\nimport './cssChart.css'; // const svgWidth = 960,\n// \tsvgHeight = 500;\n// //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n// const margin = { top: 20, right: 80, bottom: 30, left: 50 },\n// \twidth = svgWidth - margin.left - margin.right,\n// \theight = svgHeight - margin.top - margin.bottom;\n// This is only usefull with the example data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parseTime = timeParse('%Y%m%d'); // const x = scaleTime().range([0, width]),\n// \ty = scaleLinear().range([height, 0]),\n// \tz = scaleOrdinal(schemeCategory10);\n// const line = d3Line()\n// \t.curve(curveBasis)\n// \t.x(d => x(d.date))\n// \t.y(d => y(d.temperature));\n\nconst data = tsvParse(dataTsv, (d, _, columns) => {\n  d.date = parseTime(d.date);\n\n  for (let i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];\n\n  return d;\n});\nconst cities = data.columns.slice(1).map(id => {\n  return {\n    id,\n    values: data.map(d => {\n      return {\n        date: d.date,\n        temperature: d[id]\n      };\n    })\n  };\n});\nx.domain(extent(data, d => d.date));\ny.domain([min(cities, c => min(c.values, d => d.temperature)), max(cities, c => max(c.values, d => d.temperature))]);\nz.domain(cities.map(c => c.id));\n\nconst Chart = props => {\n  const svgWidth = 960;\n  const svgHeight = 500;\n  const margin = {\n    top: 20,\n    right: 80,\n    bottom: 30,\n    left: 50\n  };\n  const width = svgWidth - margin.left - margin.right;\n  const height = svgHeight - margin.top - margin.bottom;\n  const x = scaleTime().range([0, width]);\n  const y = scaleLinear().range([height, 0]);\n  const z = scaleOrdinal(schemeCategory10);\n  const line = d3Line().curve(curveBasis).x(d => x(d.date)).y(d => y(d.temperature));\n  const data = props.data;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: svgWidth,\n    height: svgHeight,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${margin.left}, ${margin.top})`,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"axis axis--x\",\n        transform: `translate(0, ${height})`,\n        ref: node => select(node).call(axisBottom(x))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"axis axis--y\",\n        ref: node => select(node).call(axisLeft(y)),\n        children: /*#__PURE__*/_jsxDEV(\"text\", {\n          transform: \"rotate(-90)\",\n          y: \"6\",\n          dy: \"0.71em\",\n          fill: \"#000\",\n          children: \"Temperature, \\xBAF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), cities.map(city => {\n        const [lastD] = city.values.slice(-1);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"city\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            className: \"line\",\n            d: line(city.values),\n            style: {\n              stroke: z(city.id)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            transform: `translate(${x(lastD.date)}, ${y(lastD.temperature)})`,\n            x: 3,\n            dy: \"0.35em\",\n            style: {\n              font: '10px sans-serif'\n            },\n            children: city.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 8\n          }, this)]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js"],"names":["React","scaleOrdinal","scaleLinear","scaleTime","tsvParse","schemeCategory10","timeParse","line","d3Line","curveBasis","min","max","extent","axisBottom","axisLeft","select","dataTsv","parseTime","data","d","_","columns","date","i","n","length","c","cities","slice","map","id","values","temperature","x","domain","y","z","Chart","props","svgWidth","svgHeight","margin","top","right","bottom","left","width","height","range","curve","node","call","city","lastD","stroke","font"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection';\n\n// Same as data.tsv\nimport dataTsv from './dataChart';\n\nimport './cssChart.css';\n\n// const svgWidth = 960,\n// \tsvgHeight = 500;\n\n// //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n// const margin = { top: 20, right: 80, bottom: 30, left: 50 },\n// \twidth = svgWidth - margin.left - margin.right,\n// \theight = svgHeight - margin.top - margin.bottom;\n\n\n// This is only usefull with the example data\nconst parseTime = timeParse('%Y%m%d');\n\n// const x = scaleTime().range([0, width]),\n// \ty = scaleLinear().range([height, 0]),\n// \tz = scaleOrdinal(schemeCategory10);\n\n\n\n// const line = d3Line()\n// \t.curve(curveBasis)\n// \t.x(d => x(d.date))\n// \t.y(d => y(d.temperature));\n\nconst data = tsvParse(dataTsv, (d, _, columns) => {\n\td.date = parseTime(d.date);\n\tfor (let i = 1, n = columns.length, c; i < n; ++i)\n\t\td[(c = columns[i])] = +d[c];\n\treturn d;\n});\n\nconst cities = data.columns.slice(1).map(id => {\n\treturn {\n\t\tid,\n\t\tvalues: data.map(d => {\n\t\t\treturn { date: d.date, temperature: d[id] };\n\t\t}),\n\t};\n});\n\nx.domain(extent(data, d => d.date));\n\ny.domain([\n\tmin(cities, c => min(c.values, d => d.temperature)),\n\tmax(cities, c => max(c.values, d => d.temperature)),\n]);\n\nz.domain(cities.map(c => c.id));\n\nconst Chart = (props) => {\n\n\tconst svgWidth \t= 960;\n\tconst svgHeight = 500;\n\n\tconst margin \t= { top: 20, right: 80, bottom: 30, left: 50 };\n\tconst width \t= svgWidth - margin.left - margin.right;\n\tconst height \t= svgHeight - margin.top - margin.bottom;\n\n\tconst x \t\t= scaleTime().range([0, width]);\n\tconst y \t\t= scaleLinear().range([height, 0]);\n\tconst z \t\t= scaleOrdinal(schemeCategory10);\n\n\n\tconst line = d3Line()\n\t\t.curve(curveBasis)\n\t\t.x(d => x(d.date))\n\t\t.y(d => y(d.temperature));\n\n\tconst data = props.data;\n\n\treturn(\n\t\t<svg width={svgWidth} height={svgHeight}>\n\t\t\t<g transform={`translate(${margin.left}, ${margin.top})`}>\n\t\t\t\t<g\n\t\t\t\t\tclassName=\"axis axis--x\"\n\t\t\t\t\ttransform={`translate(0, ${height})`}\n\t\t\t\t\tref={node => select(node).call(axisBottom(x))}\n\t\t\t\t/>\n\t\t\t\t<g className=\"axis axis--y\" ref={node => select(node).call(axisLeft(y))}>\n\t\t\t\t\t<text transform=\"rotate(-90)\" y=\"6\" dy=\"0.71em\" fill=\"#000\">\n\t\t\t\t\t\tTemperature, ºF\n\t\t\t\t\t</text>\n\t\t\t\t</g>\n\t\t\t\t{cities.map(city => {\n\t\t\t\t\tconst [lastD] = city.values.slice(-1);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g className=\"city\" key={city.id}>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tclassName=\"line\"\n\t\t\t\t\t\t\t\td={line(city.values)}\n\t\t\t\t\t\t\t\tstyle={{ stroke: z(city.id) }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<text\n\t\t\t\t\t\t\t\ttransform={`translate(${x(lastD.date)}, ${y(lastD.temperature)})`}\n\t\t\t\t\t\t\t\tx={3}\n\t\t\t\t\t\t\t\tdy=\"0.35em\"\n\t\t\t\t\t\t\t\tstyle={{ font: '10px sans-serif' }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{city.id}\n\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</g>\n\t\t</svg>\n\t);\n};\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}