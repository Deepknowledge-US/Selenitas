{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js\";\nimport React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection'; // Same as data.tsv\n\nimport dataTsv from './dataChart';\nimport './cssChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst svgWidth = 960,\n      svgHeight = 500; //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n\nconst margin = {\n  top: 20,\n  right: 80,\n  bottom: 30,\n  left: 50\n},\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\nconst parseTime = timeParse('%Y%m%d');\nconst x = scaleTime().range([0, width]),\n      y = scaleLinear().range([height, 0]),\n      z = scaleOrdinal(schemeCategory10);\nconst line = d3Line().curve(curveBasis).x(d => x(d.date)).y(d => y(d.temperature));\nconst data = tsvParse(dataTsv, (d, _, columns) => {\n  d.date = parseTime(d.date);\n\n  for (let i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];\n\n  return d;\n});\nconst cities = data.columns.slice(1).map(id => {\n  return {\n    id,\n    values: data.map(d => {\n      return {\n        date: d.date,\n        temperature: d[id]\n      };\n    })\n  };\n});\nx.domain(extent(data, d => d.date));\ny.domain([min(cities, c => min(c.values, d => d.temperature)), max(cities, c => max(c.values, d => d.temperature))]);\nz.domain(cities.map(c => c.id));\nexport default (() => /*#__PURE__*/_jsxDEV(\"svg\", {\n  width: svgWidth,\n  height: svgHeight,\n  children: /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${margin.left}, ${margin.top})`,\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"axis axis--x\",\n      transform: `translate(0, ${height})`,\n      ref: node => select(node).call(axisBottom(x))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"axis axis--y\",\n      ref: node => select(node).call(axisLeft(y)),\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        transform: \"rotate(-90)\",\n        y: \"6\",\n        dy: \"0.71em\",\n        fill: \"#000\",\n        children: \"Temperature, \\xBAF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), cities.map(city => {\n      const [lastD] = city.values.slice(-1);\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"city\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"line\",\n          d: line(city.values),\n          style: {\n            stroke: z(city.id)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          transform: `translate(${x(lastD.date)}, ${y(lastD.temperature)})`,\n          x: 3,\n          dy: \"0.35em\",\n          style: {\n            font: '10px sans-serif'\n          },\n          children: city.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, city.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 61,\n  columnNumber: 3\n}, this));","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js"],"names":["React","scaleOrdinal","scaleLinear","scaleTime","tsvParse","schemeCategory10","timeParse","line","d3Line","curveBasis","min","max","extent","axisBottom","axisLeft","select","dataTsv","svgWidth","svgHeight","margin","top","right","bottom","left","width","height","parseTime","x","range","y","z","curve","d","date","temperature","data","_","columns","i","n","length","c","cities","slice","map","id","values","domain","node","call","city","lastD","stroke","font"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection';\n\n// Same as data.tsv\nimport dataTsv from './dataChart';\n\nimport './cssChart.css';\n\nconst svgWidth = 960,\n  svgHeight = 500;\n\n//Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\nconst margin = { top: 20, right: 80, bottom: 30, left: 50 },\n  width = svgWidth - margin.left - margin.right,\n  height = svgHeight - margin.top - margin.bottom;\n\nconst parseTime = timeParse('%Y%m%d');\n\nconst x = scaleTime().range([0, width]),\n  y = scaleLinear().range([height, 0]),\n  z = scaleOrdinal(schemeCategory10);\n\nconst line = d3Line()\n  .curve(curveBasis)\n  .x(d => x(d.date))\n  .y(d => y(d.temperature));\n\nconst data = tsvParse(dataTsv, (d, _, columns) => {\n  d.date = parseTime(d.date);\n  for (let i = 1, n = columns.length, c; i < n; ++i)\n    d[(c = columns[i])] = +d[c];\n  return d;\n});\n\nconst cities = data.columns.slice(1).map(id => {\n  return {\n    id,\n    values: data.map(d => {\n      return { date: d.date, temperature: d[id] };\n    }),\n  };\n});\n\nx.domain(extent(data, d => d.date));\n\ny.domain([\n  min(cities, c => min(c.values, d => d.temperature)),\n  max(cities, c => max(c.values, d => d.temperature)),\n]);\n\nz.domain(cities.map(c => c.id));\n\nexport default () => (\n  <svg width={svgWidth} height={svgHeight}>\n    <g transform={`translate(${margin.left}, ${margin.top})`}>\n      <g\n        className=\"axis axis--x\"\n        transform={`translate(0, ${height})`}\n        ref={node => select(node).call(axisBottom(x))}\n      />\n      <g className=\"axis axis--y\" ref={node => select(node).call(axisLeft(y))}>\n        <text transform=\"rotate(-90)\" y=\"6\" dy=\"0.71em\" fill=\"#000\">\n          Temperature, ºF\n        </text>\n      </g>\n      {cities.map(city => {\n        const [lastD] = city.values.slice(-1);\n        return (\n          <g className=\"city\" key={city.id}>\n            <path\n              className=\"line\"\n              d={line(city.values)}\n              style={{ stroke: z(city.id) }}\n            />\n            <text\n              transform={`translate(${x(lastD.date)}, ${y(lastD.temperature)})`}\n              x={3}\n              dy=\"0.35em\"\n              style={{ font: '10px sans-serif' }}\n            >\n              {city.id}\n            </text>\n          </g>\n        );\n      })}\n    </g>\n  </svg>\n);"]},"metadata":{},"sourceType":"module"}