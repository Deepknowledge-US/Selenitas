{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/one/NIN/nin_0.3.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"/home/one/NIN/nin_0.3.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/one/NIN/nin_0.3.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Card,List}from'antd';import createWindow from'../CreatePanel/CreatePanel';import Chart from'../D3/Chart/Chart';import'./hook.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Receiver=function Receiver(_ref){var payload=_ref.payload,publish=_ref.publish;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),monitors=_useState4[0],setMonitors=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),init=_useState6[0],setInit=_useState6[1];// \"monitors\" is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n// This maps have two keys -> \"id\" is the name of the var we want to track and \"values\" are a list of maps, each one of them containing two keys -> time (x axis) and a value (y axis) associated to this time. \n// When component is created, \"monitors\" is an empty Array, but it will be populated with the mqtt messagges.\n// const monitors = [\n// \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n// \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n// ];\nuseEffect(function(){if(payload.topic){setMessages(function(messages){return[].concat(_toConsumableArray(messages),[payload]);});if(payload.topic.includes('panel_info')){// console.log('--- start panel_info ---');\nvar jsonObject=JSON.parse(payload.message);for(var _i=0,_Object$entries=Object.entries(jsonObject);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),k=_Object$entries$_i[0],v=_Object$entries$_i[1];if(k!=='Monitor'){createWindow(v,publish);}}// console.log('--- end ---');\n}else if(payload.topic.includes('update')){console.log(payload.topic);console.log('--- start update ---');var _jsonObject=JSON.parse(payload.message);if(monitors.length===0){setInit(true);for(var _i2=0,_Object$entries2=Object.entries(_jsonObject);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),_k=_Object$entries2$_i[0],_v=_Object$entries2$_i[1];console.log('\\nEn el init',_k,_v);var vals={id:_k,values:[{time:0,value:_v}]};monitors.push(vals);}}else{for(var _i3=0,_Object$entries3=Object.entries(_jsonObject);_i3<_Object$entries3.length;_i3++){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),_k2=_Object$entries3$_i[0],_v2=_Object$entries3$_i[1];var _iterator=_createForOfIteratorHelper(monitors),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var aVar=_step.value;if(aVar.id===_k2){var lastElement=aVar.values[aVar.values.length-1];var newTime=lastElement.time+1;var newInput={time:newTime,value:_v2};aVar.values.push(newInput);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}}console.log('--- end ---');}}},[payload,publish,monitors]);// const renderListItem = (item) => (\n// \t<List.Item>\n// \t\t<List.Item.Meta\n// \t\t\ttitle={item.topic}\n// \t\t\tdescription={item.message}\n// \t\t/>\n// \t</List.Item>\n// );\nreturn/*#__PURE__*/_jsx(Card,{title:\"Receiver\",children:init&&/*#__PURE__*/_jsx(\"div\",{id:\"allMonitorsDiv\",children:monitors.map(function(item){var newMonitor=[item];return/*#__PURE__*/_jsxs(\"div\",{class:\"monitorDiv\",children:[\" \",/*#__PURE__*/_jsx(Chart,{data:newMonitor}),\" \"]},item.id);})})});};export default Receiver;","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/Receiver.js"],"names":["React","useEffect","useState","Card","List","createWindow","Chart","Receiver","payload","publish","messages","setMessages","monitors","setMonitors","init","setInit","topic","includes","jsonObject","JSON","parse","message","Object","entries","k","v","console","log","length","vals","id","values","time","value","push","aVar","lastElement","newTime","newInput","map","item","newMonitor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\nimport createWindow from '../CreatePanel/CreatePanel'\nimport Chart from '../D3/Chart/Chart'\n\nimport './hook.css'\n\nconst Receiver = ({ payload, publish }) => {\n\tconst [messages, setMessages] = useState([])\n\tconst [monitors, setMonitors] = useState([])\n\tconst [init, setInit]         = useState(false)\n\n\n\t// \"monitors\" is an Array of Maps. Each one of this map contains the information to build a graphical monitor.\n\t// This maps have two keys -> \"id\" is the name of the var we want to track and \"values\" are a list of maps, each one of them containing two keys -> time (x axis) and a value (y axis) associated to this time. \n\t// When component is created, \"monitors\" is an empty Array, but it will be populated with the mqtt messagges.\n\n\t// const monitors = [\n\t// \t{ id: 'var_1', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] },\n\t// \t{ id: 'var_2', values: [ {time: 0, value: 11}, {time: 1, value: 20}, ] }\n\t// ];\n\n\tuseEffect(() => {\n\t\tif (payload.topic) {\n\t\t\tsetMessages(messages => [...messages, payload]);\n\t\t\tif (payload.topic.includes('panel_info') ) {\n\n\t\t\t\t// console.log('--- start panel_info ---');\n\t\t\t\tconst jsonObject = JSON.parse(payload.message);\n\n\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\tif (k !== 'Monitor') {\n\t\t\t\t\t\tcreateWindow(v, publish)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log('--- end ---');\n\t\t\t}\n\t\t\telse if ( payload.topic.includes('update') ) {\n\t\t\t\tconsole.log(payload.topic)\n\n\t\t\t\tconsole.log('--- start update ---');\n\t\t\t\tconst jsonObject = JSON.parse(payload.message);\n\n\t\t\t\tif (monitors.length === 0) {\n\t\t\t\t\tsetInit(true)\n\n\t\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\t\tconsole.log('\\nEn el init', k, v )\n\t\t\t\t\t\tconst vals = {\n\t\t\t\t\t\t\tid: k,\n\t\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t\t{time: 0, value:v},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmonitors.push(vals)\n\t\t\t\t\t}\n\n\t\t\t\t}else{\n\n\t\t\t\t\tfor (const [k,v] of Object.entries(jsonObject) ) {\n\t\t\t\t\t\tfor (let aVar of monitors) {\n\t\t\t\t\t\t\tif (aVar.id === k) {\n\t\t\t\t\t\t\t\tconst lastElement  \t= aVar.values[aVar.values.length -1];\n\t\t\t\t\t\t\t\tconst newTime  \t\t= lastElement.time + 1;\n\t\t\t\t\t\t\t\tconst newInput\t\t= {time: newTime, value:v};\n\t\t\t\t\t\t\t\taVar.values.push(newInput)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log('--- end ---');\n\t\t\t}\n\t\t}\n\t}, [payload, publish, monitors]);\n\n\t// const renderListItem = (item) => (\n\t// \t<List.Item>\n\t// \t\t<List.Item.Meta\n\t// \t\t\ttitle={item.topic}\n\t// \t\t\tdescription={item.message}\n\t// \t\t/>\n\t// \t</List.Item>\n\t// );\n\n\treturn (\n\t\t<Card title=\"Receiver\">\n\t\t\t{/* <List\n\t\t\t\tsize=\"small\"\n\t\t\t\tbordered\n\t\t\t\tdataSource={messages}\n\t\t\t\t// renderItem={renderListItem}\n\t\t\t\tstyle={{maxHeight:'15em' ,overflow:'scroll'}}\n\t\t\t/> */}\n\t\t\t{ init && \n\t\t\t\t<div id='allMonitorsDiv'>\n\t\t\t\t\t{monitors.map(function(item) {\n\t\t\t\t\t\tconst newMonitor = [item]\n\t\t\t\t\t\treturn <div key={item.id} class='monitorDiv'> <Chart data={newMonitor} /> </div>;\n\t\t\t\t  \t})}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t</Card>\n\t);\n}\n\nexport default Receiver;\n"]},"metadata":{},"sourceType":"module"}