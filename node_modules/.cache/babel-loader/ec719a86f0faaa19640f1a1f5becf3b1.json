{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js\";\nimport React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection'; // Same as data.tsv\n\nimport dataTsv from './dataChart';\nimport './cssChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = props => {\n  const svgWidth = 960;\n  const svgHeight = 500;\n  const margin = {\n    top: 20,\n    right: 80,\n    bottom: 30,\n    left: 50\n  };\n  const width = svgWidth - margin.left - margin.right;\n  const height = svgHeight - margin.top - margin.bottom;\n  console.log('W H', width, height);\n  const x = scaleLinear().range([0, width]); // const x \t\t= scaleTime().range([0, width]);\n\n  const y = scaleLinear().range([height, 0]);\n  const z = scaleOrdinal(schemeCategory10); // console.log('XXXXXXX', x)\n  // console.log('YYYYYYY', y)\n  // console.log('ZZZZZZZ', z)\n\n  const line = d3Line().curve(curveBasis).x(d => x(d.iter)).y(d => y(d.value));\n  const data = props.data;\n  const cities = data.columns.slice(1).map(id => {\n    return {\n      id,\n      values: data.map(d => {\n        return {\n          iter: d.date,\n          val: d[id]\n        }; // return { date: d.date, value: d[id] };\n      })\n    };\n  }); // cities looks like this:\n  // \tArray(3) [ {…}, {…}, {…} ]\n  // ​\t 0: Object { id: \"New York\", values: (366) […] }\n  // ​\t 1: Object { id: \"San Francisco\", values: (366) […] }\n  // ​\t 2: Object { id: \"Austin\", values: (366) […] }\n  // const cities = props.data\n\n  console.log('CITIES', cities); // console.log( '\\n/////////////\\n', typeof(data[0]), '\\n-------\\n', data[0], '\\n/////////////\\n' )\n\n  x.domain([1317420000000, 1348956000000]); // y.domain( [0,100 ] );\n  // x.domain(extent(data, d => d.date));\n\n  console.log(x.domain());\n  y.domain([min(cities, c => min(c.values, d => d.value)), max(cities, c => max(c.values, d => d.value))]);\n  z.domain(cities.map(c => c.id));\n  console.log('x', x, '\\ny', y, '\\nz', z);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: svgWidth,\n    height: svgHeight,\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${margin.left}, ${margin.top})`,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"axis axis--x\",\n        transform: `translate(0, ${height})`,\n        ref: node => select(node).call(axisBottom(x))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"axis axis--y\",\n        ref: node => select(node).call(axisLeft(y)),\n        children: /*#__PURE__*/_jsxDEV(\"text\", {\n          transform: \"rotate(-90)\",\n          y: \"6\",\n          dy: \"0.71em\",\n          fill: \"#000\",\n          children: \"value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this), cities.map(city => {\n        const [lastD] = city.values.slice(-1);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"city\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            className: \"line\",\n            d: line(city.values),\n            style: {\n              stroke: z(city.id)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            transform: `translate(${x(lastD.iter)}, ${y(lastD.value)})` // transform={`translate(${x(lastD.date)}, ${y(lastD.value)})`}\n            ,\n            x: 3,\n            dy: \"0.35em\",\n            style: {\n              font: '10px sans-serif'\n            },\n            children: city.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 8\n          }, this)]\n        }, city.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/D3/Chart/Chart.js"],"names":["React","scaleOrdinal","scaleLinear","scaleTime","tsvParse","schemeCategory10","timeParse","line","d3Line","curveBasis","min","max","extent","axisBottom","axisLeft","select","dataTsv","Chart","props","svgWidth","svgHeight","margin","top","right","bottom","left","width","height","console","log","x","range","y","z","curve","d","iter","value","data","cities","columns","slice","map","id","values","date","val","domain","c","node","call","city","lastD","stroke","font"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { scaleOrdinal, scaleLinear, scaleTime } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeParse } from 'd3-time-format';\nimport { line as d3Line, curveBasis } from 'd3-shape';\nimport { min, max, extent } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection';\n\n// Same as data.tsv\nimport dataTsv from './dataChart';\n\nimport './cssChart.css';\n\n\nconst Chart = (props) => {\n\n\tconst svgWidth \t= 960;\n\tconst svgHeight = 500;\n\n\tconst margin \t= { top: 20, right: 80, bottom: 30, left: 50 };\n\tconst width \t= svgWidth - margin.left - margin.right;\n\tconst height \t= svgHeight - margin.top - margin.bottom;\n\n\tconsole.log('W H',width,height)\n\tconst x \t\t= scaleLinear().range([0, width]);\n\t// const x \t\t= scaleTime().range([0, width]);\n\tconst y \t\t= scaleLinear().range([height, 0]);\n\tconst z \t\t= scaleOrdinal(schemeCategory10);\n\n\t// console.log('XXXXXXX', x)\n\t// console.log('YYYYYYY', y)\n\t// console.log('ZZZZZZZ', z)\n\n\n\tconst line = d3Line()\n\t\t.curve(curveBasis)\n\t\t.x(d => x(d.iter))\n\t\t.y(d => y(d.value));\n\n\tconst data = props.data;\n\n\tconst cities = data.columns.slice(1).map(id => {\n\t\treturn {\n\t\t\tid,\n\t\t\tvalues: data.map(d => {\n\t\t\t\treturn { iter: d.date, val: d[id] };\n\t\t\t\t// return { date: d.date, value: d[id] };\n\t\t\t}),\n\t\t};\n\t});\n\n\t// cities looks like this:\n\t// \tArray(3) [ {…}, {…}, {…} ]\n\t// ​\t 0: Object { id: \"New York\", values: (366) […] }\n\t// ​\t 1: Object { id: \"San Francisco\", values: (366) […] }\n\t// ​\t 2: Object { id: \"Austin\", values: (366) […] }\n\n\t// const cities = props.data\n\n\tconsole.log('CITIES',cities)\n\n\t// console.log( '\\n/////////////\\n', typeof(data[0]), '\\n-------\\n', data[0], '\\n/////////////\\n' )\n\n\n\n\tx.domain( [1317420000000, 1348956000000] );\n\t// y.domain( [0,100 ] );\n\t// x.domain(extent(data, d => d.date));\n\tconsole.log( x.domain() )\n\n\n\ty.domain([\n\t\tmin(cities, c => min(c.values, d => d.value)),\n\t\tmax(cities, c => max(c.values, d => d.value)),\n\t]);\n\tz.domain(cities.map(c => c.id));\n\n\n\tconsole.log('x', x, '\\ny', y, '\\nz', z)\n\n\treturn(\n\t\t<svg width={svgWidth} height={svgHeight}>\n\t\t\t<g transform={`translate(${margin.left}, ${margin.top})`}>\n\t\t\t\t<g\n\t\t\t\t\tclassName=\"axis axis--x\"\n\t\t\t\t\ttransform={`translate(0, ${height})`}\n\t\t\t\t\tref={node => select(node).call(axisBottom(x))}\n\t\t\t\t/>\n\t\t\t\t<g className=\"axis axis--y\" ref={node => select(node).call(axisLeft(y))}>\n\t\t\t\t\t<text transform=\"rotate(-90)\" y=\"6\" dy=\"0.71em\" fill=\"#000\">\n\t\t\t\t\t\tvalue\n\t\t\t\t\t</text>\n\t\t\t\t</g>\n\t\t\t\t{cities.map(city => {\n\t\t\t\t\tconst [lastD] = city.values.slice(-1);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g className=\"city\" key={city.id}>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tclassName=\"line\"\n\t\t\t\t\t\t\t\td={line(city.values)}\n\t\t\t\t\t\t\t\tstyle={{ stroke: z(city.id) }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<text\n\t\t\t\t\t\t\t\ttransform={`translate(${x(lastD.iter)}, ${y(lastD.value)})`}\n\t\t\t\t\t\t\t\t// transform={`translate(${x(lastD.date)}, ${y(lastD.value)})`}\n\t\t\t\t\t\t\t\tx={3}\n\t\t\t\t\t\t\t\tdy=\"0.35em\"\n\t\t\t\t\t\t\t\tstyle={{ font: '10px sans-serif' }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{city.id}\n\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</g>\n\t\t</svg>\n\t);\n};\n\nexport default Chart\n\n"]},"metadata":{},"sourceType":"module"}