{"ast":null,"code":"import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n\n    this._init();\n  }\n\n  update() {\n    this.delaunay.update();\n\n    this._init();\n\n    return this;\n  }\n\n  _init() {\n    const {\n      delaunay: {\n        points,\n        hull,\n        triangles\n      },\n      vectors\n    } = this; // Compute circumcenters.\n\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      } else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    } // Compute exterior cell rays.\n\n\n    let h = hull[hull.length - 1];\n    let p0,\n        p1 = h * 4;\n    let x0,\n        x1 = points[2 * h];\n    let y0,\n        y1 = points[2 * h + 1];\n    vectors.fill(0);\n\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n\n  render(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      delaunay: {\n        halfedges,\n        inedges,\n        hull\n      },\n      circumcenters,\n      vectors\n    } = this;\n    if (hull.length <= 1) return null;\n\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n\n    let h0,\n        h1 = hull[hull.length - 1];\n\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n\n    return buffer && buffer.value();\n  }\n\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path() : undefined;\n\n    const points = this._clip(i);\n\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n\n    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;\n\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);\n    }\n\n    context.closePath();\n    return buffer && buffer.value();\n  }\n\n  *cellPolygons() {\n    const {\n      delaunay: {\n        points\n      }\n    } = this;\n\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n\n  cellPolygon(i) {\n    const polygon = new Polygon();\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n\n    const c0 = this._regioncode(x0, y0);\n\n    const c1 = this._regioncode(x1, y1);\n\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n\n  *neighbors(i) {\n    const ci = this._clip(i);\n\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j); // find the common edge\n\n\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n\n  _cell(i) {\n    const {\n      circumcenters,\n      delaunay: {\n        inedges,\n        halfedges,\n        triangles\n      }\n    } = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n\n    const points = [];\n    let e = e0;\n\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n\n    return points;\n  }\n\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n\n    const points = this._cell(i);\n\n    if (points === null) return null;\n    const {\n      vectors: V\n    } = this;\n    const v = i * 4;\n    return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);\n  }\n\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0,\n        y0,\n        x1 = points[n - 2],\n        y1 = points[n - 1];\n\n    let c0,\n        c1 = this._regioncode(x1, y1);\n\n    let e0, e1;\n\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);else P = [sx0, sy0];\n        }\n\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);else P = [sx1, sy1];\n      }\n    }\n\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n\n    return P;\n  }\n\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x,\n          y,\n          c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points),\n        p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n\n    return P;\n  }\n\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n\n      switch (e0) {\n        case 0b0101:\n          e0 = 0b0100;\n          continue;\n        // top-left\n\n        case 0b0100:\n          e0 = 0b0110, x = this.xmax, y = this.ymin;\n          break;\n        // top\n\n        case 0b0110:\n          e0 = 0b0010;\n          continue;\n        // top-right\n\n        case 0b0010:\n          e0 = 0b1010, x = this.xmax, y = this.ymax;\n          break;\n        // right\n\n        case 0b1010:\n          e0 = 0b1000;\n          continue;\n        // bottom-right\n\n        case 0b1000:\n          e0 = 0b1001, x = this.xmin, y = this.ymax;\n          break;\n        // bottom\n\n        case 0b1001:\n          e0 = 0b0001;\n          continue;\n        // bottom-left\n\n        case 0b0001:\n          e0 = 0b0101, x = this.xmin, y = this.ymin;\n          break;\n        // left\n      }\n\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i += 2) {\n        const j = (i + 2) % P.length,\n              k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;\n      }\n    }\n\n    return j;\n  }\n\n  _project(x0, y0, vx, vy) {\n    let t = Infinity,\n        c,\n        x,\n        y;\n\n    if (vy < 0) {\n      // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) {\n      // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n\n    if (vx > 0) {\n      // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) {\n      // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n\n    return [x, y];\n  }\n\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001 : x === this.xmax ? 0b0010 : 0b0000) | (y === this.ymin ? 0b0100 : y === this.ymax ? 0b1000 : 0b0000);\n  }\n\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001 : x > this.xmax ? 0b0010 : 0b0000) | (y < this.ymin ? 0b0100 : y > this.ymax ? 0b1000 : 0b0000);\n  }\n\n}","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/node_modules/d3-delaunay/src/voronoi.js"],"names":["Path","Polygon","Voronoi","constructor","delaunay","xmin","ymin","xmax","ymax","Error","_circumcenters","Float64Array","points","length","vectors","_init","update","hull","triangles","circumcenters","subarray","i","j","n","x","y","t1","t2","t3","x1","y1","x2","y2","x3","y3","dx","dy","ex","ey","bl","cl","ab","Math","abs","d","h","p0","p1","x0","y0","fill","render","context","buffer","undefined","halfedges","inedges","ti","floor","tj","xi","yi","xj","yj","_renderSegment","h0","h1","t","v","p","_project","value","renderBounds","rect","renderCell","_clip","moveTo","lineTo","closePath","cellPolygons","cell","cellPolygon","index","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","neighbors","ci","cj","loop","ai","li","aj","lj","_cell","e0","e","push","V","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","c","vx0","vy0","vxn","vyn","Array","from","unshift","splice","k","vx","vy","Infinity"],"mappings":"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","sourcesContent":["import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      }\n      else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}