{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"]);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(defaultValue !== null && defaultValue !== void 0 ? defaultValue : value);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing when auto generated.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (precision >= 0) {\n      return precision;\n    }\n\n    if (userTyping) {\n      return undefined;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number);\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1]; // Should always be string\n\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(newValue.toString(false), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue; // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n\n    if (!updateValue.isEmpty()) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n    }\n\n    if (!readOnly && !disabled) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n  // >>> Collect input value\n\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    var inputStr = e.target.value; // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    if (!parser) {\n      inputStr = inputStr.replace(/。/g, '.');\n    }\n\n    collectInputValue(inputStr); // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current; // Ignore step since out of range\n\n\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue() {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, true);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue();\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue();\n    setFocus(false);\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (newValue.isNaN() || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, false);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/node_modules/rc-input-number/es/InputNumber.js"],"names":["_extends","_defineProperty","_typeof","_slicedToArray","_objectWithoutProperties","React","classNames","KeyCode","composeRef","getMiniDecimal","toFixed","StepHandler","getNumberPrecision","num2str","validateNumber","useCursor","useUpdateEffect","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","InputNumber","forwardRef","props","ref","_classNames","_props$prefixCls","prefixCls","className","style","min","max","_props$step","step","defaultValue","disabled","readOnly","upHandler","downHandler","keyboard","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep","inputProps","inputClassName","concat","inputRef","useRef","_React$useState","useState","_React$useState2","focus","setFocus","userTypingRef","compositionRef","_React$useState3","_React$useState4","setDecimalValue","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","useCallback","numStr","userTyping","Math","mergedParser","num","String","parsedStr","replace","mergedFormatter","number","str","mergedPrecision","separatorStr","_React$useState5","initValue","includes","Number","isNaN","_React$useState6","inputValue","setInternalInputValue","setInputValue","newValue","maxDecimal","useMemo","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","current","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","updateValue","equals","collectInputValue","inputStr","finalValue","finalDecimal","onCompositionStart","onCompositionEnd","onInternalInput","e","onInternalStep","up","_inputRef$current","stepDecimal","negate","add","updatedValue","offset","type","flushInputValue","parsedValue","formatValue","onKeyDown","event","which","ENTER","UP","DOWN","preventDefault","onKeyUp","onBlur","createElement","onFocus","upNode","downNode","autoComplete","role","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"]);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(defaultValue !== null && defaultValue !== void 0 ? defaultValue : value);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing when auto generated.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (precision >= 0) {\n      return precision;\n    }\n\n    if (userTyping) {\n      return undefined;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number);\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1]; // Should always be string\n\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(newValue.toString(false), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue; // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n\n    if (!updateValue.isEmpty()) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n    }\n\n    if (!readOnly && !disabled) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n  // >>> Collect input value\n\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    var inputStr = e.target.value; // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    if (!parser) {\n      inputStr = inputStr.replace(/。/g, '.');\n    }\n\n    collectInputValue(inputStr); // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue() {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, true);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue();\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue();\n    setFocus(false);\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (newValue.isNaN() || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, false);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;"]},"metadata":{},"sourceType":"module"}