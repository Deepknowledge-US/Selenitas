{"ast":null,"code":"export const modelLoad = value => {\n  const removeElementsByClass = className => {\n    const elements = document.getElementsByClassName(className);\n\n    while (elements.length > 0) {\n      elements[0].parentNode.removeChild(elements[0]);\n    }\n  }; // At the moment, new panels are created with class 'panel_div', we need to remove this elements before create new ones\n\n\n  removeElementsByClass('jsPanel'); // In the Lua side, models must be created in a folder named as the model file and this folder must be placed inside the Resources folder\n\n  const fileName = value.target.files[0].name;\n  const dirName = fileName.split('.')[0]; // At the moment, the separator is \"|\"\n\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'Load|' + dirName + '/' + fileName\n  });\n};\nexport const modelSetup = () => {\n  dispatch({\n    type: 'setup'\n  });\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'Setup'\n  });\n};\nexport const modelStep = () => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'Step'\n  });\n};\nexport const modelRun = () => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'Run'\n  });\n};\nexport const modelSpeed = value => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'Speed:' + value\n  });\n};\nexport const modelViewStats = () => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'ToggleView:Stats'\n  });\n};\nexport const modelViewWindows = () => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'ToggleView:Windows'\n  });\n};\nexport const modelViewFamilies = () => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'ToggleView:Families'\n  });\n};\nexport const modelViewGrid = () => {\n  publish({\n    topic: 'from_client',\n    qos: 0,\n    payload: 'ToggleView:Grid'\n  });\n};","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Hook/Publisher/publisherLogic.js"],"names":["modelLoad","value","removeElementsByClass","className","elements","document","getElementsByClassName","length","parentNode","removeChild","fileName","target","files","name","dirName","split","publish","topic","qos","payload","modelSetup","dispatch","type","modelStep","modelRun","modelSpeed","modelViewStats","modelViewWindows","modelViewFamilies","modelViewGrid"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAD,IAAW;AAEnC,QAAMC,qBAAqB,GAAIC,SAAD,IAAe;AAC5C,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,sBAAT,CAAgCH,SAAhC,CAAjB;;AACA,WAAMC,QAAQ,CAACG,MAAT,GAAkB,CAAxB,EAA0B;AACzBH,MAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYI,UAAZ,CAAuBC,WAAvB,CAAmCL,QAAQ,CAAC,CAAD,CAA3C;AACA;AACD,GALD,CAFmC,CASnC;;;AACAF,EAAAA,qBAAqB,CAAC,SAAD,CAArB,CAVmC,CAYnC;;AACA,QAAMQ,QAAQ,GAAIT,KAAK,CAACU,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,IAAxC;AACA,QAAMC,OAAO,GAAIJ,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAjB,CAdmC,CAgBnC;;AACAC,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE,UAAUL,OAAV,GAAoB,GAApB,GAA0BJ;AAH5B,GAAD,CAAP;AAKA,CAtBM;AAwBP,OAAO,MAAMU,UAAU,GAAG,MAAM;AAC/BC,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAR;AACAN,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CAPM;AASP,OAAO,MAAMI,SAAS,GAAG,MAAM;AAC9BP,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CANM;AAQP,OAAO,MAAMK,QAAQ,GAAG,MAAM;AAC7BR,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CANM;AAQP,OAAO,MAAMM,UAAU,GAAIxB,KAAD,IAAW;AACpCe,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE,WAAUlB;AAHZ,GAAD,CAAP;AAKA,CANM;AAQP,OAAO,MAAMyB,cAAc,GAAG,MAAM;AACnCV,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CANM;AAQP,OAAO,MAAMQ,gBAAgB,GAAG,MAAM;AACrCX,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CANM;AAQP,OAAO,MAAMS,iBAAiB,GAAG,MAAM;AACtCZ,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CANM;AAQP,OAAO,MAAMU,aAAa,GAAG,MAAM;AAClCb,EAAAA,OAAO,CAAC;AACPC,IAAAA,KAAK,EAAE,aADA;AAEPC,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAAD,CAAP;AAKA,CANM","sourcesContent":["export const modelLoad = (value) => {\n\n\tconst removeElementsByClass = (className) => {\n\t\tconst elements = document.getElementsByClassName(className);\n\t\twhile(elements.length > 0){\n\t\t\telements[0].parentNode.removeChild(elements[0]);\n\t\t}\n\t}\n\n\t// At the moment, new panels are created with class 'panel_div', we need to remove this elements before create new ones\n\tremoveElementsByClass('jsPanel')\n\n\t// In the Lua side, models must be created in a folder named as the model file and this folder must be placed inside the Resources folder\n\tconst fileName \t= value.target.files[0].name\n\tconst dirName \t= fileName.split('.')[0]\n\n\t// At the moment, the separator is \"|\"\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'Load|' + dirName + '/' + fileName\n\t})\n};\n\nexport const modelSetup = () => {\n\tdispatch({type: 'setup'});\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'Setup'\n\t});\n};\n\nexport const modelStep = () => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'Step'\n\t})\n};\n\nexport const modelRun = () => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'Run'\n\t})\n};\n\nexport const modelSpeed = (value) => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'Speed:'+ value\n\t})\n};\n\nexport const modelViewStats = () => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'ToggleView:Stats'\n\t})\n};\n\nexport const modelViewWindows = () => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'ToggleView:Windows'\n\t})\n};\n\nexport const modelViewFamilies = () => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'ToggleView:Families'\n\t})\n};\n\nexport const modelViewGrid = () => {\n\tpublish({\n\t\ttopic: 'from_client',\n\t\tqos: 0,\n\t\tpayload: 'ToggleView:Grid'\n\t})\n};\n\n"]},"metadata":{},"sourceType":"module"}