{"ast":null,"code":"var _jsxFileName = \"/home/one/NIN/nin_0.3.2/src/components/Mqtt/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useReducer, useState } from 'react';\nimport Connection from './Connection/Connection';\nimport Publisher from './Publisher/Publisher';\nimport Subscriber from './Subscriber/Subscriber';\nimport Receiver from './Receiver/Receiver';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const NewContext = /*#__PURE__*/createContext([]);\nconst initialState = {\n  setupClicked: false\n};\n\nfunction changeState(state, action) {\n  switch (action.type) {\n    case 'setup':\n      return {\n        setupClicked: true\n      };\n\n    default:\n      return initialState;\n  }\n}\n\nconst HookMqtt = () => {\n  _s();\n\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n  const [state, dispatch] = useReducer(changeState, initialState);\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', err => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = {\n          topic,\n          message: message.toString()\n        };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  };\n\n  const mqttPublish = context => {\n    if (client) {\n      const {\n        topic,\n        qos,\n        payload\n      } = context;\n      client.publish(topic, payload, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  };\n\n  const mqttSub = subscription => {\n    if (client) {\n      const {\n        topic,\n        qos\n      } = subscription;\n      client.subscribe(topic, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Subscribe to topics error', error);\n          return;\n        }\n\n        setIsSub(true);\n      });\n    }\n  };\n\n  const mqttUnSub = subscription => {\n    if (client) {\n      const {\n        topic\n      } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error);\n          return;\n        }\n\n        setIsSub(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(NewContext.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: [/*#__PURE__*/_jsxDEV(Connection, {\n        connect: mqttConnect,\n        disconnect: mqttDisconnect,\n        connectBtn: connectStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Subscriber, {\n        sub: mqttSub,\n        unSub: mqttUnSub,\n        showUnsub: isSubed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Publisher, {\n        publish: mqttPublish\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Receiver, {\n        payload: payload,\n        publish: mqttPublish\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(HookMqtt, \"+/jE6RSoFVSylk3LGvflv9WSjm8=\");\n\n_c = HookMqtt;\nexport default HookMqtt;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookMqtt\");","map":{"version":3,"sources":["/home/one/NIN/nin_0.3.2/src/components/Mqtt/index.js"],"names":["React","createContext","useEffect","useReducer","useState","Connection","Publisher","Subscriber","Receiver","mqtt","NewContext","initialState","setupClicked","changeState","state","action","type","HookMqtt","client","setClient","isSubed","setIsSub","payload","setPayload","connectStatus","setConnectStatus","dispatch","mqttConnect","host","mqttOption","connect","on","err","console","error","end","topic","message","toString","mqttDisconnect","mqttPublish","context","qos","publish","log","mqttSub","subscription","subscribe","mqttUnSub","unsubscribe"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useReducer, useState } from 'react';\nimport Connection from './Connection/Connection';\nimport Publisher from './Publisher/Publisher';\nimport Subscriber from './Subscriber/Subscriber';\nimport Receiver from './Receiver/Receiver';\nimport mqtt from 'mqtt';\n\nexport const NewContext = createContext([])\nconst initialState = {\n\tsetupClicked: false,\n}\n\nfunction changeState(state, action) {\n\tswitch(action.type){\n\t\tcase 'setup':\n\t\t\treturn {\n\t\t\t\tsetupClicked: true\n\t\t\t};\n\t\tdefault:\n\t\t\treturn initialState\n\t}\n}\n\n\nconst HookMqtt = () => {\n\tconst [client, setClient] \t\t\t\t= useState(null);\n\tconst [isSubed, setIsSub] \t\t\t\t= useState(false);\n\tconst [payload, setPayload] \t\t\t= useState({});\n\tconst [connectStatus, setConnectStatus] = useState('Connect');\n\tconst [state, dispatch] \t\t\t\t= useReducer(changeState, initialState);\n\n\tconst mqttConnect = (host, mqttOption) => {\n\t\tsetConnectStatus('Connecting');\n\t\tsetClient(mqtt.connect(host, mqttOption));\n\t};\n\n\tuseEffect(() => {\n\t\tif (client) {\n\t\t\tclient.on('connect', () => {\n\t\t\t\tsetConnectStatus('Connected');\n\t\t\t});\n\t\t\tclient.on('error', (err) => {\n\t\t\t\tconsole.error('Connection error: ', err);\n\t\t\t\tclient.end();\n\t\t\t});\n\t\t\tclient.on('reconnect', () => {\n\t\t\t\tsetConnectStatus('Reconnecting');\n\t\t\t});\n\t\t\tclient.on('message', (topic, message) => {\n\t\t\t\tconst payload = { topic, message: message.toString() };\n\t\t\t\tsetPayload(payload);\n\t\t\t});\n\t\t}\n\t}, [client]);\n\n\tconst mqttDisconnect = () => {\n\t\tif (client) {\n\t\t\tclient.end(() => {\n\t\t\t\tsetConnectStatus('Connect');\n\t\t\t});\n\t\t}\n\t}\n\n\tconst mqttPublish = (context) => {\n\t\tif (client) {\n\t\t\tconst { topic, qos, payload } = context;\n\t\t\tclient.publish(topic, payload, { qos }, error => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Publish error: ', error);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tconst mqttSub = (subscription) => {\n\t\tif (client) {\n\t\t\tconst { topic, qos } = subscription;\n\t\t\tclient.subscribe(topic, { qos }, (error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Subscribe to topics error', error)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tsetIsSub(true)\n\t\t\t});\n\t\t}\n\t};\n\n\tconst mqttUnSub = (subscription) => {\n\t\tif (client) {\n\t\t\tconst { topic } = subscription;\n\t\t\tclient.unsubscribe(topic, error => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.log('Unsubscribe error', error)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tsetIsSub(false);\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<NewContext.Provider value={{state, dispatch}}>\n\t\t\t\t<Connection connect={mqttConnect} disconnect={mqttDisconnect} connectBtn={connectStatus} />\n\t\t\t\t<Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n\t\t\t\t<Publisher publish={mqttPublish} />\n\t\t\t\t<Receiver payload={payload} publish={mqttPublish} />\n\t\t\t</NewContext.Provider>\n\t\t</>\n\t);\n}\n\nexport default HookMqtt;"]},"metadata":{},"sourceType":"module"}