
Agent._init = function(self, a_table)

Agent.is_in = function(self,family)

Agent.set_param = function(self,name,value)

Agent.link_neighbors = function(self, optional_families)

Agent.in_link_neighbors  = function(self,fam)

Agent.out_link_neighbors = function(self,fam)

Agent.__delete_in_neighs = function(self)

Agent.__delete_out_neighs = function(self)

Agent.__delete_links = function(self, list_of_links)

Agent.__purge = function(self)

Agent.__tostring = function(self)



Cell._init = function(self,p_table)

Cell.xcor = function(self)

Cell.ycor = function(self)

Cell.zcor = function(self)

Cell.region = function(self,pos)

Cell.come_in = function(self, agent)

Cell.come_out = function(self, agent)



Mobil._init = function(self,a_table)

Mobil.xcor = function(self)
Mobil.ycor = function(self)
Mobil.zcor = function(self)

Mobil.same_pos = function(self,agent_or_vector)

Mobil.update_cell = function(self)

Mobil.rt = function(self, num)

Mobil.lt = function(self, num)

Mobil.face = function(self, agent)

Mobil.fd = function(self, num)

Mobil.move_to = function(self, agent_or_vector)

Mobil.dist_euc_to = function(self, ag_or_point)

Mobil.dist_manh_to = function(self, ag_or_point)


Relational._init = function(self,a_table)

Relational.ends = function(self)

Relational.target = function(self)

Relational.source = function(self)



----------------
-- FAMILY
----------------


Family._init = function(self,name)

Family.add_method = function(self, name, a_function)

Family.clone_table = function(tab) -- deep-copy a table

Family.add_properties = function(self, a_table)-- -- caution with random

Family.kill = function(self, agent)

Family.__purge_agents = function(self)

Family.kill_and_purge = function(self,agent)

Family.clone_n = function(self, num, agent, a_function)

Family.exists = function(self, pred)

Family.all = function(self, pred)

Family.is_in = function(self,agent)

Family.others = function(self, agent)

Family.one_of_others = function(self, agent)

Family.with = function(self, pred)

Family.one_of = function(self)

Family.n_of = function(self, n)

Family.up_to_n_of = function(self, n)

Family.max_one_of = function(self, a_function)

Family.max_n_of = function(self, n, a_function)

Family.min_n_of = function(self, num,a_function)

Family.min_one_of = function(self, a_function)

Family.with_max = function(self,a_function)

Family.with_min = function(self,funct)

Family.get = function(self, agent_id)

Family.count_all = function(self) -- alives and killedButNotPurged agents

Family.keys = function(self)

Family.clone = function(self, agent) -- deep-copy a table

Family.alives_list = function(self)

Family.__tostring = function(self) -- called when print(Family)



FamilyCell.create_grid = function(self, x_size, y_size, offset_x, offset_y, cell_width, cell_height)

FamilyCell.diffuse = function(self,param,perc,num) -- TODO: Repair

FamilyCell.cell_of = function(self, agent_or_vector)

FamilyCell.cell_in_pos = function(self,table_)

FamilyCell.new = function(self,object)



FamilyMobil.new = function(self,a_table)

FamilyRelational.new = function(self,object)




Collection._init = function(self)

Collection.add = function(self,object)

Collection.remove = function(self, agent)








------------------
-- UTILS
------------------

utl_actions.array_shuffle(list)

utl_actions.rt(agent, num)

utl_actions.lt(agent, num)

utl_actions.fd(agent, num)

utl_actions.die(agent, family)

utl_actions.kill_and_purge(agent)




utl_checks.is_family(obj)

utl_checks.is_agent(obj)

utl_checks.is_instance(obj,cla)

utl_checks.is_in_list(item, elements)

utl_checks.exists(family,pred)

utl_checks.all(family,pred)

utl_checks.is_in(family, agent)

utl_checks.same_rgb(object_1, object_2)

utl_checks.same_rgba(object_1, object_2)

utl_checks.same_pos(object_1, object_2)



utl_fam.declare_FamilyMobil(...)

utl_fam.declare_FamilyRel(...)

utl_fam.declare_FamilyCell(...)

utl_fam.clone_n(family, n, agent, funct)

utl_fam.purge_agents(...)

utl_fam.__producer(list, index)

utl_fam.__consumer(list, index)


utl_filters.one_of(fam_or_list)

utl_filters.n_of(n,family)

utl_filters.up_to_n_of(n,family)

utl_filters.first_n(n,list)

utl_filters.last_n(n,list)

utl_filters.others (family, agent)

utl_filters.with(family, pred)

utl_filters.one_of_others(family, agent)

utl_filters.max_one_of(family, funct)

utl_filters.max_n_of(family, num, funct)

utl_filters.min_n_of(family, num,funct)

utl_filters.min_one_of(family, funct)

utl_filters.with_max(family,funct)

utl_filters.with_min(family,funct)

utl_filters.agents_in(cell)

utl_filters.find_families (fam_type)






utl_iterators.__producer(a_list, index)

utl_iterators.__consumer(a_list, an_index)

utl_iterators.__comparator(a,b,funct)

utl_iterators.__comparator_reverse(a,b,funct)

utl_iterators.shuffled(fam_or_list)

utl_iterators.ordered(fam_or_list)

utl_iterators.sorted(fam_or_list, param, reverse, funct)

utl_iterators.merge_sort_agents(A, p, r, comparator, max_or_min, param, funct)

utl_iterators.merge_ag(A, p, q, r,  comparator, max_or_min, param, funct)

utl_iterators.merge_sort_numbers(A, p, r, comparator,max_or_min)

utl_iterators.merge_num(A, p, q, r, comparator, max_or_min)





utl_list.fam_to_list(fam)

utl_list.list_copy(table_)

utl_list.list_remove(list,element)

utl_list.list_remove_index(list,index)





SETUP = function( funct )

STEP = function(funct)


utl_numbers.round(x, n)
utl_numbers.random_float(a,b)
utl_numbers.dist_euc_to(a,b)



utl_sf.lines_from(file)
utl_sf.split(pString, pPattern)





-------------
-- OSI
-------------



Observer._init = function(self)

Observer.set_center = function(self,vector)

Observer.set_zoom = function(self,number)

Observer.get_center = function(self)

Observer.get_zoom = function(self)



Simulation._init = function(self)

Simulation.clear = function(self, ...)

Simulation.__new_id = function(self)

Simulation.new_seed = function(self)

Simulation.get_seed = function(self)

Simulation.set_seed = function(self,num)

Simulation.get_is_running = function(self)

Simulation.get_time = function(self)

Simulation.get_delta_time = function(self)

Simulation.get_max_time = function(self)

Simulation.get_families = function(self)

Simulation.get_num_agents = function(self)

Simulation.set_seed = function(self,num)

Simulation.stop = function(self)

Simulation.start = function(self)

Simulation.reset = function(self)

Simulation.number_of_agents = function(self)



Interface._init = function(self)

Interface.get_value = function(self,name)

Interface.create_boolean = function(self, name, value)

Interface.create_slider = function(self, name, min, max, step, default_value)

Interface.create_input = function(self, name, value)

Interface.create_family_mobile_window = function(self, a_table)

Interface.create_family_cell_window = function(self, a_table)

Interface.create_family_rel_window = function(self, a_table)

Interface.create_window = function(self, name, optional_table)

Interface.clear = function(self)





-------------
-- WINDOWS --
-------------


Window._init = function(self, a_table)

Window.get_value = function(self,name)

Window.__new_item = function(self, name)

Window.create_boolean = function(self, name, value)

Window.create_slider = function(self, name, min, max, step, value)

Window.create_input = function(self, name, value)




WindowFamilyInfo._init = function(self, a_table)

WindowFamilyInfo.__new_item = function(self, name)

WindowFamilyInfo.init_info = function(self, family_name)

WindowFamilyInfo.update_family_info = function(self)




































































